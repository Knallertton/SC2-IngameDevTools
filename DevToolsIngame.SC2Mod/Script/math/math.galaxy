const fixed c_PI = 3.141592653589793;
const fixed c_FIXED_MAX = 524287;
const fixed c_EPSILON = 0.001;

fixed Sqr( fixed a ) { return a * a; }
fixed ClampF( fixed min, fixed max, fixed a ) {
    if (a < min) { return min; }
    if (a > max) { return max; }
    return a;
}

int ClampI( int min, int max, int a ) {
    if (a < min) { return min; }
    if (a > max) { return max; }
    return a;
}

fixed Lerp(fixed start, fixed end, fixed percent) {
    return start + percent * (end - start);
}

fixed FacingToAngle (fixed facing) {
    fixed r = facing;
    if (r < 0.0) {
        return r + 360.0;
    }
    else if (r > 360.0) {
        return r - 360.0;
    }
    return r;
}

fixed AngleToFacing (fixed angle) {
    fixed r = angle;
    if (r > 180.0) {
        return (r - 360.0);
    }
    return r;
}

fixed ValueToRange (fixed value, fixed min, fixed max) {
    return (value - min) / (max - min);
}

fixed RangeValueToRange (fixed value, fixed newMin, fixed newMax, fixed oldMin, fixed oldMax) {
    return ((((value - oldMin) * (newMax - newMin)) / (oldMax - oldMin)) + newMin);
}

point RotatePointAlongPoint (point originPoint, point otherPoint, fixed angle) {
    fixed x = PointGetX(originPoint); fixed y = PointGetY(originPoint); fixed z = PointGetHeight(originPoint);
    fixed otherX = PointGetX(otherPoint); fixed otherY = PointGetY(otherPoint); fixed otherZ = PointGetHeight(otherPoint);
    return libNtve_gf_PointFromXYZ((otherX - x) * Cos(angle) - (otherY - y) * Sin(angle) + x,
                                   (otherX - x) * Sin(angle) + (otherY - y) * Cos(angle) + y, otherZ);
}

fixed PythagoreanSolve(fixed value1, fixed value2) {
    return SquareRoot(value1 * value1 + value2 * value2);
}

fixed RadToDegree(fixed value)
{
    return value * (180 / c_PI);
}

fixed DegreeToRad(fixed value)
{
    return value * (c_PI / 180);
}

fixed TruncPoint(fixed value, int decimal){ 
    return StringToFixed(FixedToString(value, decimal));
}

fixed CorrectRotation (fixed min, fixed max, fixed value) {
    if (value > max) { value -= max; }
    else if (value < min) { value += max; }
    else if (true) { }
    return value;
}

void SRandLockSeed (int lp_seed, bool lp_unlockLock) {
    if (lp_unlockLock == true) {
        DataTableSetBool(false, "FixedSeedOldState", GameIsSeedLocked());
        GameSetSeedLocked(true);
        GameSetSeed(lp_seed);
        DataTableSetInt(true, "SRandLastSeed", lp_seed);
    }
    else {
        GameSetSeedLocked(DataTableGetBool(false,"FixedSeedOldState"));
    }
}

int SRandInt (int lp_min, int lp_max, int lp_seed) {
    int lv_rand;

    while(DataTableValueExists(true, "SRandLock")) {
        Wait(0.0, c_timeGame);
    }
    DataTableSetBool(true, "SRandLock", true);
    SRandLockSeed(lp_seed, true);
    lv_rand = RandomInt(lp_min, lp_max);
    SRandLockSeed(lp_seed, false);
    DataTableValueRemove(true, "SRandLock");
    return lv_rand;
}

fixed SRandReal (fixed lp_min, fixed lp_max, int lp_seed) {
    fixed lv_rand;

    while(DataTableValueExists(true, "SRandLock")) {
        Wait(0.0, c_timeGame);
    }
    DataTableSetBool(true, "SRandLock", true);
    SRandLockSeed(lp_seed, true);
    lv_rand = RandomFixed(lp_min, lp_max);
    SRandLockSeed(lp_seed, false);
    DataTableValueRemove(true, "SRandLock");
    return lv_rand;
}


static const string ASCII_TABLE = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff";

static int ascii_from(string s, int index) {
    return StringFind(ASCII_TABLE, StringSub(s, index, index), c_stringCase);
}

int SimpleHash(string input)
{
    int hash = 0;
    int prime = 31; // A prime number used in the hash algorithm
    int charCode;
    int i;

    for (i = 0; i < StringLength(input); i += 1) {
        charCode = ascii_from(input, i); // Get the ASCII value of the character
        hash = (hash * prime) + charCode;
    }

    // UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, IntToText(hash));
    return AbsI(hash);
     // Use Math.Abs to ensure a positive integer value
}