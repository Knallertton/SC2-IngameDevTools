include "Script/debug_h";
include "Script/ItemList";

static const string CONTAINERDLG_PATH = "UIContainer/ConsoleUIContainer/CatalogManager/SkinManager";

ItemListContainerStruct SkinContainer;
static ItemListStruct ItemList;
static ListBoxFilterStruct ListBoxFilter;

bool SkinListBoxFilterQuery(bool a, bool b){
    int player = EventPlayer();
	playergroup pg = PlayerGroupSingle(player);
	string val = DialogControlGetPropertyAsString(ListBoxFilter.editbox,c_triggerControlPropertyEditText,EventPlayer());
	ItemList_FilterListRebuild(ItemList,ListBoxFilter,val,pg);
	return true;
}


bool SkinListBoxSelectionChanged(bool a, bool b){
    return ItemList_FilterBoxSelectionChanged(ItemList, ListBoxFilter, EventPlayer());
}

void SkinListBoxSetActive(ItemListStructRef itemList, int index,playergroup pg){
	DialogControlSetPropertyAsString(SkinContainer.messageBox,c_triggerControlPropertyEditText,pg,ItemListGetVal(itemList,index));
}

static unitgroup SkinContainerTarget(){
    return UnitGroupSelected(EventPlayer());
    
}

static string SkinContainerSkin(string val){
    return val;
    
}

bool SkinContainerSendHandler(bool a, bool b){
    bool trigRan = true;
    int player = EventPlayer();
    string val = DialogControlGetPropertyAsString(SkinContainer.messageBox,c_triggerControlPropertyEditText,player);
    string SkinType = SkinContainerSkin(val);
    string ownerVal = ItemListContainer_PlayerListGetSelected(SkinContainer.ownerPlayerPulldown,EventPlayer());
    int ownerIndex = ItemListFind(playerItemList,ownerVal);
    int owner;
    if(ownerIndex == -1){owner=EventPlayer();}
    else {owner = StringToInt(ItemListGetVal(playerItemList,ownerIndex));}

    if(EventDialogControl()==SkinContainer.addButton){
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(owner,val,true);
    }
    else if(EventDialogControl()==SkinContainer.removeButton){
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(owner,val,false);
    }
    return trigRan;
}

void SkinHandler_Init(){
    playergroup pg = PlayerGroupAll();
    ItemList.id = "SkinList";
    ItemListContainer_InitStandard(SkinContainer, CONTAINERDLG_PATH, "SkinContainerSendHandler");
    ItemListInitFromCatalog(ItemList, c_gameCatalogSkin, ItemListCatalogFilter);
    ItemList_FilterListInitStandard(ListBoxFilter, "SkinListBox", SkinListBoxSetActive, ItemListItemTextValue, CONTAINERDLG_PATH+"/NavList");
	ItemList_FilterListRebuild(ItemList,ListBoxFilter,"",pg);
}