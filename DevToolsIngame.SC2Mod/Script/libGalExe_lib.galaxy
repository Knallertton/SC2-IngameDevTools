actor libGalExe_actor(int player, string param);
string libGalExe_string(int player, string param);
unit libGalExe_unit(int player, string param);
actorscope libGalExe_actorscope(int player, string param);
datetime libGalExe_datetime(int player, string param);
generichandle libGalExe_generichandle(int player, string param);
unitref libGalExe_unitref(int player, string param);
effecthistory libGalExe_effecthistory(int player, string param);
region libGalExe_region(int player, string param);
point libGalExe_point(int player, string param);
text libGalExe_text(int player, string param);
int libGalExe_int(int player, string param);
fixed libGalExe_fixed(int player, string param);
bool libGalExe_bool(int player, string param);
unitgroup libGalExe_unitgroup(int player, string param);
wave libGalExe_wave(int player, string param);
playergroup libGalExe_playergroup(int player, string param);
order libGalExe_order(int player, string param);
marker libGalExe_marker(int player, string param);
waveinfo libGalExe_waveinfo(int player, string param);
wavetarget libGalExe_wavetarget(int player, string param);
aifilter libGalExe_aifilter(int player, string param);
unitfilter libGalExe_unitfilter(int player, string param);
bank libGalExe_bank(int player, string param);
bitmask libGalExe_bitmask(int player, string param);
camerainfo libGalExe_camerainfo(int player, string param);
color libGalExe_color(int player, string param);
trigger libGalExe_trigger(int player, string param);
abilcmd libGalExe_abilcmd(int player, string param);
byte libGalExe_byte(int player, string param);
doodad libGalExe_doodad(int player, string param);
revealer libGalExe_revealer(int player, string param);
sound libGalExe_sound(int player, string param);
soundlink libGalExe_soundlink(int player, string param);
timer libGalExe_timer(int player, string param);
transmissionsource libGalExe_transmissionsource(int player, string param);





actor libGalExe_actor(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "libNtve_gf_AttachModelToActor"){
		return libNtve_gf_AttachModelToActor(libGalExe_actor(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "libNtve_gf_LastCreatedActor"){
		return libNtve_gf_LastCreatedActor();
	}

	else if(function == "libNtve_gf_AttachModelToUnit"){
		return libNtve_gf_AttachModelToUnit(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "libNtve_gf_AttachModelToUnitInheritVisibility"){
		return libNtve_gf_AttachModelToUnitInheritVisibility(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "libNtve_gf_AttachModelToActor2"){
		return libNtve_gf_AttachModelToActor2(libGalExe_actor(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "libNtve_gf_ActorLastCreated"){
		return libNtve_gf_ActorLastCreated();
	}

	else if(function == "libNtve_gf_ActorLastCreatedSend"){
		return libNtve_gf_ActorLastCreatedSend();
	}

	else if(function == "libNtve_gf_AttachActorToUnit"){
		return libNtve_gf_AttachActorToUnit(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "libNtve_gf_AttachActorToActor"){
		return libNtve_gf_AttachActorToActor(libGalExe_actor(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "ActorCreate"){
		return ActorCreate(libGalExe_actorscope(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_string(player, params[3]), libGalExe_string(player, params[4]));
	}

	else if(function == "ActorRegionCreate"){
		return ActorRegionCreate(libGalExe_actorscope(player, params[0]), libGalExe_string(player, params[1]), libGalExe_region(player, params[2]));
	}

	else if(function == "libNtve_gf_CreateActorAtPoint"){
		return libNtve_gf_CreateActorAtPoint(libGalExe_string(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "libNtve_gf_CreateModelAtPoint"){
		return libNtve_gf_CreateModelAtPoint(libGalExe_string(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "libNtve_gf_LookAtTargetFromPointWithZOffset"){
		return libNtve_gf_LookAtTargetFromPointWithZOffset(libGalExe_point(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "libNtve_gf_LookAtTargetFromUnitAttachPoint"){
		return libNtve_gf_LookAtTargetFromUnitAttachPoint(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ActorRefGet"){
		return ActorRefGet(libGalExe_actor(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ActorFrom"){
		return ActorFrom(libGalExe_string(player, params[0]));
	}

	else if(function == "ActorFromActor"){
		return ActorFromActor(libGalExe_actor(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ActorFromDoodad"){
		return ActorFromDoodad(libGalExe_doodad(player, params[0]));
	}

	else if(function == "ActorFromPortrait"){
		return ActorFromPortrait(libGalExe_int(player, params[0]));
	}

	else if(function == "ActorFromDialogControl"){
		return ActorFromDialogControl(libGalExe_int(player, params[0]));
	}

	else if(function == "ActorFromScope"){
		return ActorFromScope(libGalExe_actorscope(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "libNtve_gf_MainActorofUnit"){
		return libNtve_gf_MainActorofUnit(libGalExe_unit(player, params[0]));
	}

	else if(function == "DataTableGetActor"){
		return DataTableGetActor(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ActorScopeRefGet"){
		return ActorScopeRefGet(libGalExe_actorscope(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ActorLastCreated"){
		return ActorLastCreated();
	}

	else if(function == "ActorLastCreatedSend"){
		return ActorLastCreatedSend();
	}
	return null;
}




string libGalExe_string(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "TextureGetSlotName"){
		return TextureGetSlotName(libGalExe_string(player, params[0]));
	}

	else if(function == "libNtve_gf_DifficultyValueUnitType"){
		return libNtve_gf_DifficultyValueUnitType(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_string(player, params[3]));
	}

	else if(function == "BankValueGetAsString"){
		return BankValueGetAsString(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "BankName"){
		return BankName(libGalExe_bank(player, params[0]));
	}

	else if(function == "BankKeyName"){
		return BankKeyName(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "BankSectionName"){
		return BankSectionName(libGalExe_bank(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "CatalogFieldType"){
		return CatalogFieldType(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "CatalogFieldValueGet"){
		return CatalogFieldValueGet(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "CatalogReferenceGet"){
		return CatalogReferenceGet(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "CatalogLinkReplacement"){
		return CatalogLinkReplacement(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "ConversationDataStateImagePath"){
		return ConversationDataStateImagePath(libGalExe_string(player, params[0]));
	}

	else if(function == "ConversationDataStateMoviePath"){
		return ConversationDataStateMoviePath(libGalExe_string(player, params[0]));
	}

	else if(function == "ConversationDataStateModel"){
		return ConversationDataStateModel(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ConversationDataStateUpgrade"){
		return ConversationDataStateUpgrade(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ConversationDataStateAttachPoint"){
		return ConversationDataStateAttachPoint(libGalExe_string(player, params[0]));
	}

	else if(function == "ConversationDataChoiceId"){
		return ConversationDataChoiceId(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "ConversationDataLineId"){
		return ConversationDataLineId(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "ConversationDataGetSound"){
		return ConversationDataGetSound(libGalExe_string(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "ConversationDataGetSpeaker"){
		return ConversationDataGetSpeaker(libGalExe_string(player, params[0]));
	}

	else if(function == "ConversationDataActiveLine"){
		return ConversationDataActiveLine();
	}

	else if(function == "ConversationDataActiveSound"){
		return ConversationDataActiveSound();
	}

	else if(function == "FixedToString"){
		return FixedToString(libGalExe_fixed(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "IntToString"){
		return IntToString(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf_ConvertBooleanToString"){
		return libNtve_gf_ConvertBooleanToString(libGalExe_bool(player, params[0]));
	}

	else if(function == "libNtve_gf_ConvertPointToString"){
		return libNtve_gf_ConvertPointToString(libGalExe_point(player, params[0]));
	}

	else if(function == "libNtve_gf_ConvertColorToString"){
		return libNtve_gf_ConvertColorToString(libGalExe_color(player, params[0]));
	}

	else if(function == "libNtve_gf_ConvertBearingsToString"){
		return libNtve_gf_ConvertBearingsToString(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_fixed(player, params[2]), libGalExe_fixed(player, params[3]), libGalExe_fixed(player, params[4]), libGalExe_fixed(player, params[5]), libGalExe_fixed(player, params[6]), libGalExe_fixed(player, params[7]), libGalExe_fixed(player, params[8]));
	}

	else if(function == "libNtve_gf_ConvertXYToString"){
		return libNtve_gf_ConvertXYToString(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "libNtve_gf_Convert3DVectorToString"){
		return libNtve_gf_Convert3DVectorToString(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_fixed(player, params[2]));
	}

	else if(function == "libNtve_gf_Convert3DRotationToString"){
		return libNtve_gf_Convert3DRotationToString(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_fixed(player, params[2]), libGalExe_fixed(player, params[3]), libGalExe_fixed(player, params[4]), libGalExe_fixed(player, params[5]));
	}

	else if(function == "EventCutsceneBookmark"){
		return EventCutsceneBookmark();
	}

	else if(function == "DataTableGetString"){
		return DataTableGetString(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DataTableValueName"){
		return DataTableValueName(libGalExe_bool(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DateTimeToString"){
		return DateTimeToString(libGalExe_datetime(player, params[0]));
	}

	else if(function == "libNtve_gf_GetCurrentDayofWeek"){
		return libNtve_gf_GetCurrentDayofWeek();
	}

	else if(function == "libNtve_gf_GetWeekdayFromDateTime"){
		return libNtve_gf_GetWeekdayFromDateTime(libGalExe_datetime(player, params[0]));
	}

	else if(function == "libNtve_gf_GetMonthFromDateTime"){
		return libNtve_gf_GetMonthFromDateTime(libGalExe_datetime(player, params[0]));
	}

	else if(function == "libNtve_gf_FormatDateTimeasString"){
		return libNtve_gf_FormatDateTimeasString(libGalExe_datetime(player, params[0]));
	}

	else if(function == "DialogGetImage"){
		return DialogGetImage(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogControlGetPropertyAsString"){
		return DialogControlGetPropertyAsString(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "libNtve_gf_DialogItemEditValue"){
		return libNtve_gf_DialogItemEditValue(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_DialogItemImage"){
		return libNtve_gf_DialogItemImage(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "EffectHistoryGetAbil"){
		return EffectHistoryGetAbil(libGalExe_effecthistory(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "EffectHistoryGetEffect"){
		return EffectHistoryGetEffect(libGalExe_effecthistory(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "EffectHistoryGetWeapon"){
		return EffectHistoryGetWeapon(libGalExe_effecthistory(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TerrainTexture"){
		return TerrainTexture(libGalExe_point(player, params[0]));
	}

	else if(function == "EventPlayerEffectUsed"){
		return EventPlayerEffectUsed();
	}

	else if(function == "EventPlayerEffectUsedUnitType"){
		return EventPlayerEffectUsedUnitType(libGalExe_int(player, params[0]));
	}

	else if(function == "EventPlayerEffectUsedSourceBehavior"){
		return EventPlayerEffectUsedSourceBehavior();
	}

	else if(function == "GameMapPath"){
		return GameMapPath();
	}

	else if(function == "GameTerrainSet"){
		return GameTerrainSet();
	}

	else if(function == "EventChatMessage"){
		return EventChatMessage(libGalExe_bool(player, params[0]));
	}

	else if(function == "GameUserHandle"){
		return GameUserHandle(libGalExe_int(player, params[0]));
	}

	else if(function == "AbilityCommandGetAbility"){
		return AbilityCommandGetAbility(libGalExe_abilcmd(player, params[0]));
	}

	else if(function == "EventPingUnitType"){
		return EventPingUnitType();
	}

	else if(function == "PlayerHandle"){
		return PlayerHandle(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerRace"){
		return PlayerRace(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerHero"){
		return PlayerHero(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerSkin"){
		return PlayerSkin(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerMount"){
		return PlayerMount(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerArtifact"){
		return PlayerArtifact(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerCommander"){
		return PlayerCommander(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerGetHotkeyProfile"){
		return PlayerGetHotkeyProfile(libGalExe_int(player, params[0]));
	}

	else if(function == "SoundLinkId"){
		return SoundLinkId(libGalExe_soundlink(player, params[0]));
	}

	else if(function == "SoundPortraitModel"){
		return SoundPortraitModel(libGalExe_soundlink(player, params[0]));
	}

	else if(function == "BattleReportGetMissionImage"){
		return BattleReportGetMissionImage(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportGetSceneImage"){
		return BattleReportGetSceneImage(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportGetButtonImage"){
		return BattleReportGetButtonImage(libGalExe_int(player, params[0]));
	}

	else if(function == "StringWord"){
		return StringWord(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "StringSub"){
		return StringSub(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "StringReplace"){
		return StringReplace(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "StringReplaceWord"){
		return StringReplaceWord(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]), libGalExe_bool(player, params[4]));
	}

	else if(function == "StringCase"){
		return StringCase(libGalExe_string(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "TalentTreeGetHeroTalentLink"){
		return TalentTreeGetHeroTalentLink(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "EventUpgradeName"){
		return EventUpgradeName();
	}

	else if(function == "TechTreeUnitProducesUnit"){
		return TechTreeUnitProducesUnit(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TechTreeUnitProducesUpgrade"){
		return TechTreeUnitProducesUpgrade(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TriggerEventParamName"){
		return TriggerEventParamName(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "EventGenericName"){
		return EventGenericName();
	}

	else if(function == "TriggerGetFunction"){
		return TriggerGetFunction(libGalExe_trigger(player, params[0]));
	}

	else if(function == "EventButtonPressed"){
		return EventButtonPressed();
	}

	else if(function == "EventAlert"){
		return EventAlert();
	}

	else if(function == "PathGetUnitType"){
		return PathGetUnitType(libGalExe_int(player, params[0]));
	}

	else if(function == "PathGetLineTexture"){
		return PathGetLineTexture(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PathGetStepModel"){
		return PathGetStepModel(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitGetOriginalEffect"){
		return UnitGetOriginalEffect(libGalExe_unit(player, params[0]));
	}

	else if(function == "EventUnitGetWeapon"){
		return EventUnitGetWeapon();
	}

	else if(function == "EventUnitGetItemType"){
		return EventUnitGetItemType();
	}

	else if(function == "EventUnitDamageEffect"){
		return EventUnitDamageEffect();
	}

	else if(function == "EventUnitHealEffect"){
		return EventUnitHealEffect();
	}

	else if(function == "EventUnitEffectUsed"){
		return EventUnitEffectUsed();
	}

	else if(function == "UnitGetType"){
		return UnitGetType(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitTypeGetGenderCode"){
		return UnitTypeGetGenderCode(libGalExe_string(player, params[0]));
	}

	else if(function == "UnitTypeFromString"){
		return UnitTypeFromString(libGalExe_string(player, params[0]));
	}

	else if(function == "EventUnitCreatedBehavior"){
		return EventUnitCreatedBehavior();
	}

	else if(function == "EventUnitCreatedAbil"){
		return EventUnitCreatedAbil();
	}

	else if(function == "UnitAbilityGet"){
		return UnitAbilityGet(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_UnitAbilityGetByType"){
		return libNtve_gf_UnitAbilityGetByType(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitBehaviorGet"){
		return UnitBehaviorGet(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "EventUnitBehavior"){
		return EventUnitBehavior();
	}

	else if(function == "UnitWeaponGet"){
		return UnitWeaponGet(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "EventUnitProgressObjectType"){
		return EventUnitProgressObjectType();
	}

	else if(function == "libNtve_gf_TriggeringProgressAbility"){
		return libNtve_gf_TriggeringProgressAbility();
	}

	else if(function == "libNtve_gf_TriggeringProgressEffect"){
		return libNtve_gf_TriggeringProgressEffect();
	}

	else if(function == "libNtve_gf_TriggeringProgressUnitType"){
		return libNtve_gf_TriggeringProgressUnitType();
	}

	else if(function == "libNtve_gf_TriggeringProgressUpgrade"){
		return libNtve_gf_TriggeringProgressUpgrade();
	}

	else if(function == "UnitQueueItemGet"){
		return UnitQueueItemGet(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "libNtve_gf_QueuedBehaviorTypeInTrainingQueueSlot"){
		return libNtve_gf_QueuedBehaviorTypeInTrainingQueueSlot(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "libNtve_gf_QueuedUnitTypeInTrainingQueueSlot"){
		return libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot"){
		return libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UserDataGetActor"){
		return UserDataGetActor(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetGameLink"){
		return UserDataGetGameLink(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetImagePath"){
		return UserDataGetImagePath(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetImageAttachPoint"){
		return UserDataGetImageAttachPoint(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetModel"){
		return UserDataGetModel(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetMovie"){
		return UserDataGetMovie(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetSound"){
		return UserDataGetSound(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetString"){
		return UserDataGetString(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetUnit"){
		return UserDataGetUnit(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetUpgrade"){
		return UserDataGetUpgrade(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetUserType"){
		return UserDataGetUserType(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataTypeFromReference"){
		return UserDataTypeFromReference(libGalExe_string(player, params[0]));
	}

	else if(function == "AutomationLuaGlobalGetAsString"){
		return AutomationLuaGlobalGetAsString(libGalExe_string(player, params[0]));
	}

	else if(function == "PickedExclusiveMapTag"){
		return PickedExclusiveMapTag();
	}
	return libGalExe_stripQuotes(param);
}




unit libGalExe_unit(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "PlayerBeaconGetTargetUnit"){
		return PlayerBeaconGetTargetUnit(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "BankValueGetAsUnit"){
		return BankValueGetAsUnit(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]), libGalExe_point(player, params[4]), libGalExe_fixed(player, params[5]));
	}

	else if(function == "BankLastRestoredUnit"){
		return BankLastRestoredUnit();
	}

	else if(function == "DataTableGetUnit"){
		return DataTableGetUnit(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DialogControlGetPropertyAsUnit"){
		return DialogControlGetPropertyAsUnit(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "EffectHistoryGetUnitByLocation"){
		return EffectHistoryGetUnitByLocation(libGalExe_effecthistory(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "EventPlayerEffectUsedUnit"){
		return EventPlayerEffectUsedUnit(libGalExe_int(player, params[0]));
	}

	else if(function == "EventPlayerEffectUsedUnitImpact"){
		return EventPlayerEffectUsedUnitImpact();
	}

	else if(function == "EventPlayerEffectUsedUnitLaunch"){
		return EventPlayerEffectUsedUnitLaunch();
	}

	else if(function == "OrderGetTargetItem"){
		return OrderGetTargetItem(libGalExe_order(player, params[0]));
	}

	else if(function == "OrderGetTargetUnit"){
		return OrderGetTargetUnit(libGalExe_order(player, params[0]));
	}

	else if(function == "EventPingUnit"){
		return EventPingUnit();
	}

	else if(function == "PingGetUnit"){
		return PingGetUnit(libGalExe_int(player, params[0]));
	}

	else if(function == "RegionGetAttachUnit"){
		return RegionGetAttachUnit(libGalExe_region(player, params[0]));
	}

	else if(function == "PathGetDestinationUnit"){
		return PathGetDestinationUnit(libGalExe_int(player, params[0]));
	}

	else if(function == "PathGetSourceUnit"){
		return PathGetSourceUnit(libGalExe_int(player, params[0]));
	}

	else if(function == "PathGetUnit"){
		return PathGetUnit(libGalExe_int(player, params[0]));
	}

	else if(function == "UnitLastCreated"){
		return UnitLastCreated();
	}

	else if(function == "UnitGetOriginalCaster"){
		return UnitGetOriginalCaster(libGalExe_unit(player, params[0]));
	}

	else if(function == "libNtve_gf_LastReplacedUnit"){
		return libNtve_gf_LastReplacedUnit();
	}

	else if(function == "EventUnitRangeUnit"){
		return EventUnitRangeUnit();
	}

	else if(function == "EventUnit"){
		return EventUnit();
	}

	else if(function == "UnitAgent"){
		return UnitAgent(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "EventUnitGetItem"){
		return EventUnitGetItem();
	}

	else if(function == "libNtve_gf_KillingUnit"){
		return libNtve_gf_KillingUnit();
	}

	else if(function == "EventUnitTarget"){
		return EventUnitTarget();
	}

	else if(function == "EventUnitDamageSourceUnit"){
		return EventUnitDamageSourceUnit();
	}

	else if(function == "EventUnitHealLaunchUnit"){
		return EventUnitHealLaunchUnit();
	}

	else if(function == "libNtve_gf_AcquiredTarget"){
		return libNtve_gf_AcquiredTarget();
	}

	else if(function == "EventUnitVictimUnit"){
		return EventUnitVictimUnit();
	}

	else if(function == "EventUnitItemUsed"){
		return EventUnitItemUsed();
	}

	else if(function == "UnitRallyPointTargetUnit"){
		return UnitRallyPointTargetUnit(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitAddOnChild"){
		return UnitAddOnChild(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitAddOnParent"){
		return UnitAddOnParent(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitCargoLastCreated"){
		return UnitCargoLastCreated();
	}

	else if(function == "UnitCargo"){
		return UnitCargo(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitTransport"){
		return UnitTransport(libGalExe_unit(player, params[0]));
	}

	else if(function == "EventUnitCargo"){
		return EventUnitCargo();
	}

	else if(function == "UnitInventoryLastCreated"){
		return UnitInventoryLastCreated();
	}

	else if(function == "UnitInventoryItem"){
		return UnitInventoryItem(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitInventoryUnit"){
		return UnitInventoryUnit(libGalExe_unit(player, params[0]));
	}

	else if(function == "EventUnitPowerupUnit"){
		return EventUnitPowerupUnit();
	}

	else if(function == "EventUnitInventoryItem"){
		return EventUnitInventoryItem();
	}

	else if(function == "EventUnitInventoryItemTargetUnit"){
		return EventUnitInventoryItemTargetUnit();
	}

	else if(function == "EventUnitTargetUnit"){
		return EventUnitTargetUnit();
	}

	else if(function == "EventUnitAbilityOtherUnit"){
		return EventUnitAbilityOtherUnit();
	}

	else if(function == "EventUnitCreatedUnit"){
		return EventUnitCreatedUnit();
	}

	else if(function == "UnitBehaviorEffectUnit"){
		return UnitBehaviorEffectUnit(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UnitMagazineLastCreated"){
		return UnitMagazineLastCreated();
	}

	else if(function == "UnitGetMagazine"){
		return UnitGetMagazine(libGalExe_unit(player, params[0]));
	}

	else if(function == "EventUnitProgressUnit"){
		return EventUnitProgressUnit();
	}

	else if(function == "UnitGroupUnit"){
		return UnitGroupUnit(libGalExe_unitgroup(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitGroupRandomUnit"){
		return UnitGroupRandomUnit(libGalExe_unitgroup(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_ClosestUnitToPoint"){
		return libNtve_gf_ClosestUnitToPoint(libGalExe_point(player, params[0]), libGalExe_unitgroup(player, params[1]));
	}

	else if(function == "UnitGroupClosestToPoint"){
		return UnitGroupClosestToPoint(libGalExe_unitgroup(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "UnitGroupLoopCurrent"){
		return UnitGroupLoopCurrent();
	}

	else if(function == "MarkerGetCastingUnit"){
		return MarkerGetCastingUnit(libGalExe_marker(player, params[0]));
	}

	else if(function == "UnitFromId"){
		return UnitFromId(libGalExe_int(player, params[0]));
	}

	else if(function == "UnitGroupUnitFromEnd"){
		return UnitGroupUnitFromEnd(libGalExe_unitgroup(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitGroupNearestUnit"){
		return UnitGroupNearestUnit(libGalExe_unitgroup(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "UnitRefToUnit"){
		return UnitRefToUnit(libGalExe_unitref(player, params[0]));
	}
	return null;
}




actorscope libGalExe_actorscope(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "libNtve_gf_LastCreatedActorScope"){
		return libNtve_gf_LastCreatedActorScope();
	}

	else if(function == "libNtve_gf_ActorScopeLastCreated"){
		return libNtve_gf_ActorScopeLastCreated();
	}

	else if(function == "libNtve_gf_ActorScopeLastCreatedSend"){
		return libNtve_gf_ActorScopeLastCreatedSend();
	}

	else if(function == "ActorScopeCreate"){
		return ActorScopeCreate(libGalExe_string(player, params[0]));
	}

	else if(function == "ActorScopeFrom"){
		return ActorScopeFrom(libGalExe_string(player, params[0]));
	}

	else if(function == "ActorScopeFromActor"){
		return ActorScopeFromActor(libGalExe_actor(player, params[0]));
	}

	else if(function == "ActorScopeFromPortrait"){
		return ActorScopeFromPortrait(libGalExe_int(player, params[0]));
	}

	else if(function == "ActorScopeFromDialogControl"){
		return ActorScopeFromDialogControl(libGalExe_int(player, params[0]));
	}

	else if(function == "ActorScopeFromUnit"){
		return ActorScopeFromUnit(libGalExe_unit(player, params[0]));
	}

	else if(function == "DataTableGetActorScope"){
		return DataTableGetActorScope(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ActorScopeLastCreated"){
		return ActorScopeLastCreated();
	}

	else if(function == "ActorScopeLastCreatedSend"){
		return ActorScopeLastCreatedSend();
	}
	return null;
}




datetime libGalExe_datetime(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "IntToDateTime"){
		return IntToDateTime(libGalExe_int(player, params[0]));
	}

	else if(function == "StringToDateTime"){
		return StringToDateTime(libGalExe_string(player, params[0]));
	}

	else if(function == "CurrentDateTimeGet"){
		return CurrentDateTimeGet();
	}

	else if(function == "InitialDateTimeGet"){
		return InitialDateTimeGet();
	}
	return null;
}




generichandle libGalExe_generichandle(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetGenericHandle"){
		return DataTableGetGenericHandle(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}
	return null;
}




unitref libGalExe_unitref(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetUnitRef"){
		return DataTableGetUnitRef(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitRefFromUnit"){
		return UnitRefFromUnit(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitRefFromVariable"){
		return UnitRefFromVariable(libGalExe_string(player, params[0]));
	}
	return null;
}




effecthistory libGalExe_effecthistory(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "UnitEffectHistory"){
		return UnitEffectHistory(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}
	return null;
}




region libGalExe_region(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetRegion"){
		return DataTableGetRegion(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "RegionEmpty"){
		return RegionEmpty();
	}

	else if(function == "RegionEntireMap"){
		return RegionEntireMap();
	}

	else if(function == "RegionPlayableMap"){
		return RegionPlayableMap();
	}

	else if(function == "RegionFromName"){
		return RegionFromName(libGalExe_string(player, params[0]));
	}

	else if(function == "RegionCircle"){
		return RegionCircle(libGalExe_point(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "RegionRect"){
		return RegionRect(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_fixed(player, params[2]), libGalExe_fixed(player, params[3]));
	}

	else if(function == "EventUnitRegion"){
		return EventUnitRegion();
	}

	else if(function == "RegionFromId"){
		return RegionFromId(libGalExe_int(player, params[0]));
	}
	return null;
}




point libGalExe_point(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "PlayerBeaconGetTargetPoint"){
		return PlayerBeaconGetTargetPoint(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "BankValueGetAsPoint"){
		return BankValueGetAsPoint(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "CameraGetTarget"){
		return CameraGetTarget(libGalExe_int(player, params[0]));
	}

	else if(function == "CameraInfoGetTarget"){
		return CameraInfoGetTarget(libGalExe_camerainfo(player, params[0]));
	}

	else if(function == "libNtve_gf_ConvertStringToPoint"){
		return libNtve_gf_ConvertStringToPoint(libGalExe_string(player, params[0]));
	}

	else if(function == "DataTableGetPoint"){
		return DataTableGetPoint(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "EventPlayerEffectUsedPoint"){
		return EventPlayerEffectUsedPoint(libGalExe_int(player, params[0]));
	}

	else if(function == "OrderGetTargetPoint"){
		return OrderGetTargetPoint(libGalExe_order(player, params[0]));
	}

	else if(function == "OrderGetTargetPosition"){
		return OrderGetTargetPosition(libGalExe_order(player, params[0]));
	}

	else if(function == "EventPingUnitPosition"){
		return EventPingUnitPosition();
	}

	else if(function == "EventPingPoint"){
		return EventPingPoint();
	}

	else if(function == "PingGetPosition"){
		return PingGetPosition(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerStartLocation"){
		return PlayerStartLocation(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf_PointFromPositionAndAngle"){
		return libNtve_gf_PointFromPositionAndAngle(libGalExe_point(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "libNtve_gf_PointFromXYZ"){
		return libNtve_gf_PointFromXYZ(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_fixed(player, params[2]));
	}

	else if(function == "Point"){
		return Point(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "PointFromName"){
		return PointFromName(libGalExe_string(player, params[0]));
	}

	else if(function == "libNtve_gf_PointFacingAngle"){
		return libNtve_gf_PointFacingAngle(libGalExe_point(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "libNtve_gf_PointWithZOffset"){
		return libNtve_gf_PointWithZOffset(libGalExe_point(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "PointWithOffset"){
		return PointWithOffset(libGalExe_point(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_fixed(player, params[2]));
	}

	else if(function == "PointWithOffsetPolar"){
		return PointWithOffsetPolar(libGalExe_point(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_fixed(player, params[2]));
	}

	else if(function == "libNtve_gf_PointOffsetTowardsPoint"){
		return libNtve_gf_PointOffsetTowardsPoint(libGalExe_point(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_point(player, params[2]));
	}

	else if(function == "libNtve_gf_RandomPointBetweenPoints"){
		return libNtve_gf_RandomPointBetweenPoints(libGalExe_point(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "PointReflect"){
		return PointReflect(libGalExe_point(player, params[0]), libGalExe_point(player, params[1]), libGalExe_fixed(player, params[2]));
	}

	else if(function == "PointInterpolate"){
		return PointInterpolate(libGalExe_point(player, params[0]), libGalExe_point(player, params[1]), libGalExe_fixed(player, params[2]));
	}

	else if(function == "MidPoint"){
		return MidPoint(libGalExe_point(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "RegionRandomPoint"){
		return RegionRandomPoint(libGalExe_region(player, params[0]));
	}

	else if(function == "RegionGetCenter"){
		return RegionGetCenter(libGalExe_region(player, params[0]));
	}

	else if(function == "RegionGetBoundsMin"){
		return RegionGetBoundsMin(libGalExe_region(player, params[0]));
	}

	else if(function == "RegionGetBoundsMax"){
		return RegionGetBoundsMax(libGalExe_region(player, params[0]));
	}

	else if(function == "PathGetDestinationPoint"){
		return PathGetDestinationPoint(libGalExe_int(player, params[0]));
	}

	else if(function == "PathGetSourcePoint"){
		return PathGetSourcePoint(libGalExe_int(player, params[0]));
	}

	else if(function == "UnitGetPosition"){
		return UnitGetPosition(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitGetGoalPosition"){
		return UnitGetGoalPosition(libGalExe_unit(player, params[0]));
	}

	else if(function == "EventUnitDamageSourcePoint"){
		return EventUnitDamageSourcePoint();
	}

	else if(function == "UnitRallyPointTargetPoint"){
		return UnitRallyPointTargetPoint(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitGetAttachmentPoint"){
		return UnitGetAttachmentPoint(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "EventUnitInventoryItemTargetPoint"){
		return EventUnitInventoryItemTargetPoint();
	}

	else if(function == "EventUnitTargetPoint"){
		return EventUnitTargetPoint();
	}

	else if(function == "UnitTypePlacementFromPoint"){
		return UnitTypePlacementFromPoint(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_point(player, params[2]), libGalExe_fixed(player, params[3]));
	}

	else if(function == "UnitTypePlacementFromUnit"){
		return UnitTypePlacementFromUnit(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_unit(player, params[2]), libGalExe_fixed(player, params[3]));
	}

	else if(function == "UnitTypePlacementTestsFromPoint"){
		return UnitTypePlacementTestsFromPoint(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_point(player, params[2]), libGalExe_fixed(player, params[3]), libGalExe_int(player, params[4]));
	}

	else if(function == "UnitTypePlacementTestsFromUnit"){
		return UnitTypePlacementTestsFromUnit(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_unit(player, params[2]), libGalExe_fixed(player, params[3]), libGalExe_int(player, params[4]));
	}

	else if(function == "libNtve_gf_CenterOfUnitGroup"){
		return libNtve_gf_CenterOfUnitGroup(libGalExe_unitgroup(player, params[0]));
	}

	else if(function == "UnitGroupCenterOfGroup"){
		return UnitGroupCenterOfGroup(libGalExe_unitgroup(player, params[0]));
	}

	else if(function == "PointFromId"){
		return PointFromId(libGalExe_int(player, params[0]));
	}

	else if(function == "RegionGetOffset"){
		return RegionGetOffset(libGalExe_region(player, params[0]));
	}
	return libNtve_gf_ConvertStringToPoint(param);
}




text libGalExe_text(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "ActorGetText"){
		return ActorGetText(libGalExe_actor(player, params[0]));
	}

	else if(function == "ActorScopeGetText"){
		return ActorScopeGetText(libGalExe_actorscope(player, params[0]));
	}

	else if(function == "BankValueGetAsText"){
		return BankValueGetAsText(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "BankSizeAsText"){
		return BankSizeAsText(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "BankKeySizeAsText"){
		return BankKeySizeAsText(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "BankSectionSizeAsText"){
		return BankSectionSizeAsText(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ConversationReplyGetText"){
		return ConversationReplyGetText(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "ConversationDataStateName"){
		return ConversationDataStateName(libGalExe_string(player, params[0]));
	}

	else if(function == "ConversationDataStateText"){
		return ConversationDataStateText(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "StringToText"){
		return StringToText(libGalExe_string(player, params[0]));
	}

	else if(function == "FixedToText"){
		return FixedToText(libGalExe_fixed(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "FixedToTextAdvanced"){
		return FixedToTextAdvanced(libGalExe_fixed(player, params[0]), libGalExe_int(player, params[1]), libGalExe_bool(player, params[2]), libGalExe_int(player, params[3]), libGalExe_int(player, params[4]));
	}

	else if(function == "IntToText"){
		return IntToText(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf_ConvertBooleanToText"){
		return libNtve_gf_ConvertBooleanToText(libGalExe_bool(player, params[0]));
	}

	else if(function == "FormatNumber"){
		return FormatNumber(libGalExe_int(player, params[0]));
	}

	else if(function == "FormatDuration"){
		return FormatDuration(libGalExe_int(player, params[0]));
	}

	else if(function == "DataTableGetText"){
		return DataTableGetText(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DialogGetTitle"){
		return DialogGetTitle(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf_DialogItemText"){
		return libNtve_gf_DialogItemText(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetPropertyAsText"){
		return DialogControlGetPropertyAsText(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "libNtve_gf_DialogItemTooltip"){
		return libNtve_gf_DialogItemTooltip(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "GameMapName"){
		return GameMapName();
	}

	else if(function == "GameMapDescription"){
		return GameMapDescription();
	}

	else if(function == "AchievementPercentText"){
		return AchievementPercentText(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "GameUserName"){
		return GameUserName(libGalExe_int(player, params[0]));
	}

	else if(function == "ObjectiveGetName"){
		return ObjectiveGetName(libGalExe_int(player, params[0]));
	}

	else if(function == "ObjectiveGetDescription"){
		return ObjectiveGetDescription(libGalExe_int(player, params[0]));
	}

	else if(function == "PingGetTooltip"){
		return PingGetTooltip(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerName"){
		return PlayerName(libGalExe_int(player, params[0]));
	}

	else if(function == "DifficultyName"){
		return DifficultyName(libGalExe_int(player, params[0]));
	}

	else if(function == "DifficultyNameCampaign"){
		return DifficultyNameCampaign(libGalExe_int(player, params[0]));
	}

	else if(function == "SoundSubtitleText"){
		return SoundSubtitleText(libGalExe_soundlink(player, params[0]));
	}

	else if(function == "BattleReportGetMissionText"){
		return BattleReportGetMissionText(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportGetSceneText"){
		return BattleReportGetSceneText(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportGetDifficultyLevelBestTimeText"){
		return BattleReportGetDifficultyLevelBestTimeText(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "BattleReportGetBestTimeText"){
		return BattleReportGetBestTimeText(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportGetResearchTitle"){
		return BattleReportGetResearchTitle(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportGetResearchText"){
		return BattleReportGetResearchText(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportGetBonusTitle"){
		return BattleReportGetBonusTitle(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportGetBonusText"){
		return BattleReportGetBonusText(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportGetButtonText"){
		return BattleReportGetButtonText(libGalExe_int(player, params[0]));
	}

	else if(function == "TextReplaceWord"){
		return TextReplaceWord(libGalExe_text(player, params[0]), libGalExe_text(player, params[1]), libGalExe_text(player, params[2]), libGalExe_int(player, params[3]), libGalExe_bool(player, params[4]));
	}

	else if(function == "TextTimeFormat"){
		return TextTimeFormat(libGalExe_text(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TextCase"){
		return TextCase(libGalExe_text(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "StringExternal"){
		return StringExternal(libGalExe_string(player, params[0]));
	}

	else if(function == "StringExternalHotkey"){
		return StringExternalHotkey(libGalExe_string(player, params[0]));
	}

	else if(function == "StringExternalAsset"){
		return StringExternalAsset(libGalExe_string(player, params[0]));
	}

	else if(function == "TextWithColor"){
		return TextWithColor(libGalExe_text(player, params[0]), libGalExe_color(player, params[1]));
	}

	else if(function == "TextExpressionAssemble"){
		return TextExpressionAssemble(libGalExe_string(player, params[0]));
	}

	else if(function == "UIHotKeyString"){
		return UIHotKeyString(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_bool(player, params[2]), libGalExe_bool(player, params[3]));
	}

	else if(function == "libNtve_gf__BB_HPBarFormatLabel"){
		return libNtve_gf__BB_HPBarFormatLabel(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf_FormatTipTitle"){
		return libNtve_gf_FormatTipTitle(libGalExe_text(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitGetName"){
		return UnitGetName(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitTypeGetName"){
		return UnitTypeGetName(libGalExe_string(player, params[0]));
	}

	else if(function == "UserDataGetText"){
		return UserDataGetText(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "PlayerColorName"){
		return PlayerColorName(libGalExe_int(player, params[0]));
	}
	return StringToText(param);
}




int libGalExe_int(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "TextureGetSlotComponent"){
		return TextureGetSlotComponent(libGalExe_string(player, params[0]));
	}

	else if(function == "libNtve_gf_DifficultyValueInt"){
		return libNtve_gf_DifficultyValueInt(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "PlayerBeaconGetNumAllies"){
		return PlayerBeaconGetNumAllies(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerBeaconGetAllyPlayerId"){
		return PlayerBeaconGetAllyPlayerId(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerBeaconRequestedMinerals"){
		return PlayerBeaconRequestedMinerals(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerBeaconRequestedVespene"){
		return PlayerBeaconRequestedVespene(libGalExe_int(player, params[0]));
	}

	else if(function == "BankValueGetAsInt"){
		return BankValueGetAsInt(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "BankBackupGetId"){
		return BankBackupGetId(libGalExe_bank(player, params[0]));
	}

	else if(function == "BankBackupGetLatestId"){
		return BankBackupGetLatestId(libGalExe_bank(player, params[0]));
	}

	else if(function == "BankKeyCount"){
		return BankKeyCount(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "BankPlayer"){
		return BankPlayer(libGalExe_bank(player, params[0]));
	}

	else if(function == "BankSectionCount"){
		return BankSectionCount(libGalExe_bank(player, params[0]));
	}

	else if(function == "BitMaskCountOnBits"){
		return BitMaskCountOnBits(libGalExe_bitmask(player, params[0]));
	}

	else if(function == "EventCameraMoveReason"){
		return EventCameraMoveReason();
	}

	else if(function == "CatalogEntryClass"){
		return CatalogEntryClass(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "CatalogEntryCount"){
		return CatalogEntryCount(libGalExe_int(player, params[0]));
	}

	else if(function == "CatalogFieldCount"){
		return CatalogFieldCount(libGalExe_string(player, params[0]));
	}

	else if(function == "CatalogFieldTypeCategory"){
		return CatalogFieldTypeCategory(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "CatalogFieldValueGetAsInt"){
		return CatalogFieldValueGetAsInt(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "CatalogFieldValueGetFlagsAsInt"){
		return CatalogFieldValueGetFlagsAsInt(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "CatalogFieldValueCount"){
		return CatalogFieldValueCount(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "CatalogReferenceGetAsInt"){
		return CatalogReferenceGetAsInt(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "CatalogReferenceCount"){
		return CatalogReferenceCount(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "AbilityClass"){
		return AbilityClass(libGalExe_string(player, params[0]));
	}

	else if(function == "ConversationReplyGetState"){
		return ConversationReplyGetState(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "ConversationReplyGetIndex"){
		return ConversationReplyGetIndex(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "ConversationDataStateGetValue"){
		return ConversationDataStateGetValue(libGalExe_string(player, params[0]));
	}

	else if(function == "ConversationDataStateIndexCount"){
		return ConversationDataStateIndexCount(libGalExe_string(player, params[0]));
	}

	else if(function == "ConversationDataStateImageEdge"){
		return ConversationDataStateImageEdge(libGalExe_string(player, params[0]));
	}

	else if(function == "ConversationDataChoiceCount"){
		return ConversationDataChoiceCount(libGalExe_string(player, params[0]));
	}

	else if(function == "ConversationDataChoiceGetPickedCount"){
		return ConversationDataChoiceGetPickedCount(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ConversationDataChoiceGetState"){
		return ConversationDataChoiceGetState(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ConversationDataLineCount"){
		return ConversationDataLineCount(libGalExe_string(player, params[0]));
	}

	else if(function == "ConversationDataLineGetPickedCount"){
		return ConversationDataLineGetPickedCount(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "StringToInt"){
		return StringToInt(libGalExe_string(player, params[0]));
	}

	else if(function == "FixedToInt"){
		return FixedToInt(libGalExe_fixed(player, params[0]));
	}

	else if(function == "BoolToInt"){
		return BoolToInt(libGalExe_bool(player, params[0]));
	}

	else if(function == "Color255FromFixed"){
		return Color255FromFixed(libGalExe_fixed(player, params[0]));
	}

	else if(function == "CutsceneCreateNoPosition"){
		return CutsceneCreateNoPosition(libGalExe_string(player, params[0]), libGalExe_playergroup(player, params[1]), libGalExe_bool(player, params[2]));
	}

	else if(function == "CutsceneCreateNew"){
		return CutsceneCreateNew(libGalExe_string(player, params[0]), libGalExe_point(player, params[1]), libGalExe_fixed(player, params[2]), libGalExe_playergroup(player, params[3]), libGalExe_bool(player, params[4]));
	}

	else if(function == "CutsceneLastCreated"){
		return CutsceneLastCreated();
	}

	else if(function == "CutsceneGetTriggerControl"){
		return CutsceneGetTriggerControl(libGalExe_int(player, params[0]));
	}

	else if(function == "EventCutsceneId"){
		return EventCutsceneId();
	}

	else if(function == "DataTableGetControl"){
		return DataTableGetControl(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "libNtve_gf_ValueFromDataTableDialogItem"){
		return libNtve_gf_ValueFromDataTableDialogItem(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DataTableGetInt"){
		return DataTableGetInt(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DataTableGetPortrait"){
		return DataTableGetPortrait(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "libNtve_gf_ValueFromDataTableTextTag"){
		return libNtve_gf_ValueFromDataTableTextTag(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DataTableGetTransmission"){
		return DataTableGetTransmission(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DataTableValueType"){
		return DataTableValueType(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DataTableValueCount"){
		return DataTableValueCount(libGalExe_bool(player, params[0]));
	}

	else if(function == "DateTimeToInt"){
		return DateTimeToInt(libGalExe_datetime(player, params[0]));
	}

	else if(function == "GetDateTimeYear"){
		return GetDateTimeYear(libGalExe_datetime(player, params[0]));
	}

	else if(function == "GetDateTimeMonth"){
		return GetDateTimeMonth(libGalExe_datetime(player, params[0]));
	}

	else if(function == "GetDateTimeDay"){
		return GetDateTimeDay(libGalExe_datetime(player, params[0]));
	}

	else if(function == "GetDateTimeHour"){
		return GetDateTimeHour(libGalExe_datetime(player, params[0]));
	}

	else if(function == "GetDateTimeMinute"){
		return GetDateTimeMinute(libGalExe_datetime(player, params[0]));
	}

	else if(function == "GetDateTimeSecond"){
		return GetDateTimeSecond(libGalExe_datetime(player, params[0]));
	}

	else if(function == "GetDateTimeWeekday"){
		return GetDateTimeWeekday(libGalExe_datetime(player, params[0]));
	}

	else if(function == "SynchronousGameStartTimeGet"){
		return SynchronousGameStartTimeGet();
	}

	else if(function == "CurrentSynchronousGameTimeGet"){
		return CurrentSynchronousGameTimeGet();
	}

	else if(function == "libNtve_gf_ConvertIntegerToDebugMessageType"){
		return libNtve_gf_ConvertIntegerToDebugMessageType(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogGetWidth"){
		return DialogGetWidth(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogGetHeight"){
		return DialogGetHeight(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogGetOffsetX"){
		return DialogGetOffsetX(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogGetOffsetY"){
		return DialogGetOffsetY(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogGetAnchor"){
		return DialogGetAnchor(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogGetRelativeAnchor"){
		return DialogGetRelativeAnchor(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogGetChannel"){
		return DialogGetChannel(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogGetRenderPriority"){
		return DialogGetRenderPriority(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogControlCreate"){
		return DialogControlCreate(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlCreateInPanel"){
		return DialogControlCreateInPanel(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlCreateFromTemplate"){
		return DialogControlCreateFromTemplate(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "DialogControlCreateInPanelFromTemplate"){
		return DialogControlCreateInPanelFromTemplate(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "DialogControlHookup"){
		return DialogControlHookup(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "DialogControlHookupStandard"){
		return DialogControlHookupStandard(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DialogControlHookupUnitStatus"){
		return DialogControlHookupUnitStatus(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_unit(player, params[2]));
	}

	else if(function == "DialogControlLastCreated"){
		return DialogControlLastCreated();
	}

	else if(function == "EventDialogControl"){
		return EventDialogControl();
	}

	else if(function == "EventDialogControlEventType"){
		return EventDialogControlEventType();
	}

	else if(function == "EventDialogControlMouseButton"){
		return EventDialogControlMouseButton();
	}

	else if(function == "libNtve_gf_CreateDialogItemAchievement"){
		return libNtve_gf_CreateDialogItemAchievement(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]), libGalExe_int(player, params[4]), libGalExe_int(player, params[5]), libGalExe_text(player, params[6]), libGalExe_string(player, params[7]));
	}

	else if(function == "libNtve_gf_CreateDialogItemButton"){
		return libNtve_gf_CreateDialogItemButton(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]), libGalExe_int(player, params[4]), libGalExe_int(player, params[5]), libGalExe_text(player, params[6]), libGalExe_text(player, params[7]), libGalExe_string(player, params[8]));
	}

	else if(function == "libNtve_gf_CreateDialogItemCheckBox"){
		return libNtve_gf_CreateDialogItemCheckBox(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]), libGalExe_int(player, params[4]), libGalExe_int(player, params[5]), libGalExe_text(player, params[6]), libGalExe_bool(player, params[7]));
	}

	else if(function == "libNtve_gf_CreateDialogItemImage"){
		return libNtve_gf_CreateDialogItemImage(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]), libGalExe_int(player, params[4]), libGalExe_int(player, params[5]), libGalExe_text(player, params[6]), libGalExe_string(player, params[7]), libGalExe_int(player, params[8]), libGalExe_bool(player, params[9]), libGalExe_color(player, params[10]), libGalExe_int(player, params[11]));
	}

	else if(function == "libNtve_gf_CreateDialogItemLabel"){
		return libNtve_gf_CreateDialogItemLabel(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]), libGalExe_int(player, params[4]), libGalExe_int(player, params[5]), libGalExe_text(player, params[6]), libGalExe_color(player, params[7]), libGalExe_bool(player, params[8]), libGalExe_fixed(player, params[9]));
	}

	else if(function == "DialogControlGetWidth"){
		return DialogControlGetWidth(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetHeight"){
		return DialogControlGetHeight(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetOffsetX"){
		return DialogControlGetOffsetX(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetOffsetY"){
		return DialogControlGetOffsetY(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetAnchor"){
		return DialogControlGetAnchor(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetRelativeAnchor"){
		return DialogControlGetRelativeAnchor(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetRelativeControl"){
		return DialogControlGetRelativeControl(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetPropertyAsInt"){
		return DialogControlGetPropertyAsInt(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "DialogControlGetPropertyAsControl"){
		return DialogControlGetPropertyAsControl(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "DialogControlGetSelectedItem"){
		return DialogControlGetSelectedItem(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetItemCount"){
		return DialogControlGetItemCount(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetType"){
		return DialogControlGetType(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf_DialogItemImageType"){
		return libNtve_gf_DialogItemImageType(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_ScreenButton"){
		return libNtve_gf_ScreenButton(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf_ScreenImageDialogItem"){
		return libNtve_gf_ScreenImageDialogItem(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf_ScreenLabelDialogItem"){
		return libNtve_gf_ScreenLabelDialogItem(libGalExe_int(player, params[0]));
	}

	else if(function == "EffectHistoryCount"){
		return EffectHistoryCount(libGalExe_effecthistory(player, params[0]));
	}

	else if(function == "EffectHistoryGetAmountInt"){
		return EffectHistoryGetAmountInt(libGalExe_effecthistory(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_bool(player, params[3]));
	}

	else if(function == "EffectHistoryGetType"){
		return EffectHistoryGetType(libGalExe_effecthistory(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "CliffLevel"){
		return CliffLevel(libGalExe_point(player, params[0]));
	}

	else if(function == "CreepAdjacent"){
		return CreepAdjacent(libGalExe_point(player, params[0]));
	}

	else if(function == "PowerLevel"){
		return PowerLevel(libGalExe_int(player, params[0]), libGalExe_point(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "PlayerValidateEffectPoint"){
		return PlayerValidateEffectPoint(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_point(player, params[2]));
	}

	else if(function == "PlayerValidateEffectUnit"){
		return PlayerValidateEffectUnit(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_unit(player, params[2]));
	}

	else if(function == "UnitValidateEffectPoint"){
		return UnitValidateEffectPoint(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_point(player, params[2]));
	}

	else if(function == "UnitValidateEffectUnit"){
		return UnitValidateEffectUnit(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_unit(player, params[2]));
	}

	else if(function == "EventPlayerEffectUsedUnitOwner"){
		return EventPlayerEffectUsedUnitOwner(libGalExe_int(player, params[0]));
	}

	else if(function == "EventPlayerEffectUsedAmountInt"){
		return EventPlayerEffectUsedAmountInt(libGalExe_int(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "GameGetSpeedValue"){
		return GameGetSpeedValue();
	}

	else if(function == "GameGetSpeedValueMinimum"){
		return GameGetSpeedValueMinimum();
	}

	else if(function == "GameTestConfigType"){
		return GameTestConfigType();
	}

	else if(function == "EventCheatUsed"){
		return EventCheatUsed();
	}

	else if(function == "EventGameUser"){
		return EventGameUser();
	}

	else if(function == "BoardCreate"){
		return BoardCreate(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_text(player, params[2]), libGalExe_color(player, params[3]));
	}

	else if(function == "BoardLastCreated"){
		return BoardLastCreated();
	}

	else if(function == "AbsI"){
		return AbsI(libGalExe_int(player, params[0]));
	}

	else if(function == "CeilingI"){
		return CeilingI(libGalExe_fixed(player, params[0]));
	}

	else if(function == "libNtve_gf_ArithmeticIntClamp"){
		return libNtve_gf_ArithmeticIntClamp(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "FloorI"){
		return FloorI(libGalExe_fixed(player, params[0]));
	}

	else if(function == "Log2I"){
		return Log2I(libGalExe_fixed(player, params[0]));
	}

	else if(function == "ModI"){
		return ModI(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PowI"){
		return PowI(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "RoundI"){
		return RoundI(libGalExe_fixed(player, params[0]));
	}

	else if(function == "Pow2I"){
		return Pow2I(libGalExe_fixed(player, params[0]));
	}

	else if(function == "SquareRootI"){
		return SquareRootI(libGalExe_fixed(player, params[0]));
	}

	else if(function == "TruncI"){
		return TruncI(libGalExe_fixed(player, params[0]));
	}

	else if(function == "MinI"){
		return MinI(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "MaxI"){
		return MaxI(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "RandomInt"){
		return RandomInt(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "ObjectiveGetState"){
		return ObjectiveGetState(libGalExe_int(player, params[0]));
	}

	else if(function == "ObjectiveGetPriority"){
		return ObjectiveGetPriority(libGalExe_int(player, params[0]));
	}

	else if(function == "OrderGetPlayer"){
		return OrderGetPlayer(libGalExe_order(player, params[0]));
	}

	else if(function == "OrderGetTargetType"){
		return OrderGetTargetType(libGalExe_order(player, params[0]));
	}

	else if(function == "AbilityCommandGetCommand"){
		return AbilityCommandGetCommand(libGalExe_abilcmd(player, params[0]));
	}

	else if(function == "AbilityCommandGetAction"){
		return AbilityCommandGetAction(libGalExe_abilcmd(player, params[0]));
	}

	else if(function == "EventPingUnitControlPlayer"){
		return EventPingUnitControlPlayer();
	}

	else if(function == "EventPingUnitUpkeepPlayer"){
		return EventPingUnitUpkeepPlayer();
	}

	else if(function == "EventPingOption"){
		return EventPingOption();
	}

	else if(function == "PlayerGetPropertyInt"){
		return PlayerGetPropertyInt(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerScoreValueGetAsInt"){
		return PlayerScoreValueGetAsInt(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "PlayerArtifactRank"){
		return PlayerArtifactRank(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerCommanderLevel"){
		return PlayerCommanderLevel(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerCommanderMasteryLevel"){
		return PlayerCommanderMasteryLevel(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerCommanderMasteryTalentRank"){
		return PlayerCommanderMasteryTalentRank(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerType"){
		return PlayerType(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerStatus"){
		return PlayerStatus(libGalExe_int(player, params[0]));
	}

	else if(function == "EventPlayer"){
		return EventPlayer();
	}

	else if(function == "EventPlayerProperty"){
		return EventPlayerProperty();
	}

	else if(function == "EventPlayerPropertyChangeInt"){
		return EventPlayerPropertyChangeInt();
	}

	else if(function == "DifficultyAPM"){
		return DifficultyAPM(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerGroupCount"){
		return PlayerGroupCount(libGalExe_playergroup(player, params[0]));
	}

	else if(function == "PlayerGroupPlayer"){
		return PlayerGroupPlayer(libGalExe_playergroup(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PointPathingCost"){
		return PointPathingCost(libGalExe_point(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "PathingType"){
		return PathingType(libGalExe_point(player, params[0]));
	}

	else if(function == "libNtve_gf_CinematicPortrait"){
		return libNtve_gf_CinematicPortrait(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf_FullscreenPortrait"){
		return libNtve_gf_FullscreenPortrait();
	}

	else if(function == "PortraitGetGame"){
		return PortraitGetGame();
	}

	else if(function == "PortraitGetPlanetPanel"){
		return PortraitGetPlanetPanel();
	}

	else if(function == "PortraitGetTriggerControl"){
		return PortraitGetTriggerControl(libGalExe_int(player, params[0]));
	}

	else if(function == "PortraitCreate"){
		return PortraitCreate(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]), libGalExe_int(player, params[4]), libGalExe_string(player, params[5]), libGalExe_string(player, params[6]), libGalExe_string(player, params[7]), libGalExe_bool(player, params[8]), libGalExe_bool(player, params[9]));
	}

	else if(function == "PortraitLastCreated"){
		return PortraitLastCreated();
	}

	else if(function == "UnitSubgroupIndexSelected"){
		return UnitSubgroupIndexSelected(libGalExe_int(player, params[0]));
	}

	else if(function == "SoundLinkAsset"){
		return SoundLinkAsset(libGalExe_soundlink(player, params[0]));
	}

	else if(function == "StatEventCreate"){
		return StatEventCreate(libGalExe_string(player, params[0]));
	}

	else if(function == "StatEventLastCreated"){
		return StatEventLastCreated();
	}

	else if(function == "PlanetPanelGetContactButtonState"){
		return PlanetPanelGetContactButtonState(libGalExe_int(player, params[0]));
	}

	else if(function == "PurchaseCategoryCreate"){
		return PurchaseCategoryCreate(libGalExe_playergroup(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PurchaseCategoryLastCreated"){
		return PurchaseCategoryLastCreated();
	}

	else if(function == "PurchaseGroupCreate"){
		return PurchaseGroupCreate(libGalExe_playergroup(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "PurchaseGroupLastCreated"){
		return PurchaseGroupLastCreated();
	}

	else if(function == "PurchaseItemCreate"){
		return PurchaseItemCreate(libGalExe_playergroup(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "PurchaseItemLastCreated"){
		return PurchaseItemLastCreated();
	}

	else if(function == "PurchaseGetSelectedPurchaseCategory"){
		return PurchaseGetSelectedPurchaseCategory(libGalExe_int(player, params[0]));
	}

	else if(function == "PurchaseGetSelectedPurchaseItem"){
		return PurchaseGetSelectedPurchaseItem(libGalExe_int(player, params[0]));
	}

	else if(function == "EventPurchaseMade"){
		return EventPurchaseMade();
	}

	else if(function == "BattleReportGetDialogControl"){
		return BattleReportGetDialogControl();
	}

	else if(function == "BattleReportLastCreated"){
		return BattleReportLastCreated();
	}

	else if(function == "BattleReportGetPriority"){
		return BattleReportGetPriority(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportGetState"){
		return BattleReportGetState(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportPanelGetSelectedBattleReport"){
		return BattleReportPanelGetSelectedBattleReport(libGalExe_int(player, params[0]));
	}

	else if(function == "EventBattleReportPanelMissionSelected"){
		return EventBattleReportPanelMissionSelected();
	}

	else if(function == "EventBattleReportPanelSceneSelected"){
		return EventBattleReportPanelSceneSelected();
	}

	else if(function == "ResearchTierCreate"){
		return ResearchTierCreate(libGalExe_playergroup(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "ResearchTierLastCreated"){
		return ResearchTierLastCreated();
	}

	else if(function == "ResearchCategoryCreate"){
		return ResearchCategoryCreate(libGalExe_playergroup(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "ResearchCategoryLastCreated"){
		return ResearchCategoryLastCreated();
	}

	else if(function == "ResearchItemCreate"){
		return ResearchItemCreate(libGalExe_playergroup(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "ResearchItemLastCreated"){
		return ResearchItemLastCreated();
	}

	else if(function == "ResearchItemGetSelected"){
		return ResearchItemGetSelected(libGalExe_int(player, params[0]));
	}

	else if(function == "MercenaryLastCreated"){
		return MercenaryLastCreated();
	}

	else if(function == "MercenaryGetSelected"){
		return MercenaryGetSelected(libGalExe_int(player, params[0]));
	}

	else if(function == "StringCompare"){
		return StringCompare(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_bool(player, params[2]));
	}

	else if(function == "StringLength"){
		return StringLength(libGalExe_string(player, params[0]));
	}

	else if(function == "StringFind"){
		return StringFind(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_bool(player, params[2]));
	}

	else if(function == "TalentTreeGetSelectedHeroTalentTree"){
		return TalentTreeGetSelectedHeroTalentTree(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TalentTreeGetSelectedHeroTalentTreeColumn"){
		return TalentTreeGetSelectedHeroTalentTreeColumn(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "EventUpgradeLevelDelta"){
		return EventUpgradeLevelDelta();
	}

	else if(function == "TechTreeBehaviorCount"){
		return TechTreeBehaviorCount(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "TechTreeAbilityCount"){
		return TechTreeAbilityCount(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "TechTreeUnitCount"){
		return TechTreeUnitCount(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "TechTreeUnitAliasCount"){
		return TechTreeUnitAliasCount(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "TechTreeUpgradeCount"){
		return TechTreeUpgradeCount(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitTechTreeBehaviorCount"){
		return UnitTechTreeBehaviorCount(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitTechTreeUnitCount"){
		return UnitTechTreeUnitCount(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitTechTreeUpgradeCount"){
		return UnitTechTreeUpgradeCount(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "TechTreeGetProduceCap"){
		return TechTreeGetProduceCap(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "TechTreeUnitProducedAbilCmdCount"){
		return TechTreeUnitProducedAbilCmdCount(libGalExe_string(player, params[0]));
	}

	else if(function == "TechTreeUnitProducesUnitCount"){
		return TechTreeUnitProducesUnitCount(libGalExe_string(player, params[0]));
	}

	else if(function == "TechTreeUnitProducesUpgradeCount"){
		return TechTreeUnitProducesUpgradeCount(libGalExe_string(player, params[0]));
	}

	else if(function == "TechTreeUpgradeProducedAbilCmdCount"){
		return TechTreeUpgradeProducedAbilCmdCount(libGalExe_string(player, params[0]));
	}

	else if(function == "TextTagCreate"){
		return TextTagCreate(libGalExe_text(player, params[0]), libGalExe_int(player, params[1]), libGalExe_point(player, params[2]), libGalExe_fixed(player, params[3]), libGalExe_bool(player, params[4]), libGalExe_bool(player, params[5]), libGalExe_playergroup(player, params[6]));
	}

	else if(function == "TextTagLastCreated"){
		return TextTagLastCreated();
	}

	else if(function == "TimerWindowCreate"){
		return TimerWindowCreate(libGalExe_timer(player, params[0]), libGalExe_text(player, params[1]), libGalExe_bool(player, params[2]), libGalExe_bool(player, params[3]));
	}

	else if(function == "TimerWindowLastCreated"){
		return TimerWindowLastCreated();
	}

	else if(function == "TransmissionSendForPlayer"){
		return TransmissionSendForPlayer(libGalExe_playergroup(player, params[0]), libGalExe_transmissionsource(player, params[1]), libGalExe_int(player, params[2]), libGalExe_string(player, params[3]), libGalExe_string(player, params[4]), libGalExe_soundlink(player, params[5]), libGalExe_text(player, params[6]), libGalExe_text(player, params[7]), libGalExe_fixed(player, params[8]), libGalExe_int(player, params[9]), libGalExe_bool(player, params[10]), libGalExe_int(player, params[11]));
	}

	else if(function == "TransmissionSendForPlayerSelect"){
		return TransmissionSendForPlayerSelect(libGalExe_playergroup(player, params[0]), libGalExe_transmissionsource(player, params[1]), libGalExe_int(player, params[2]), libGalExe_string(player, params[3]), libGalExe_string(player, params[4]), libGalExe_soundlink(player, params[5]), libGalExe_text(player, params[6]), libGalExe_text(player, params[7]), libGalExe_fixed(player, params[8]), libGalExe_int(player, params[9]), libGalExe_bool(player, params[10]), libGalExe_int(player, params[11]), libGalExe_bool(player, params[12]));
	}

	else if(function == "TransmissionLastSent"){
		return TransmissionLastSent();
	}

	else if(function == "TransmissionSendAdvanced"){
		return TransmissionSendAdvanced(libGalExe_playergroup(player, params[0]), libGalExe_transmissionsource(player, params[1]), libGalExe_int(player, params[2]), libGalExe_string(player, params[3]), libGalExe_string(player, params[4]), libGalExe_soundlink(player, params[5]), libGalExe_text(player, params[6]), libGalExe_text(player, params[7]), libGalExe_fixed(player, params[8]), libGalExe_int(player, params[9]), libGalExe_bool(player, params[10]));
	}

	else if(function == "TransmissionSend"){
		return TransmissionSend(libGalExe_playergroup(player, params[0]), libGalExe_transmissionsource(player, params[1]), libGalExe_int(player, params[2]), libGalExe_string(player, params[3]), libGalExe_soundlink(player, params[4]), libGalExe_text(player, params[5]), libGalExe_text(player, params[6]), libGalExe_fixed(player, params[7]), libGalExe_int(player, params[8]), libGalExe_bool(player, params[9]));
	}

	else if(function == "TriggerActiveCount"){
		return TriggerActiveCount(libGalExe_trigger(player, params[0]));
	}

	else if(function == "TriggerGetExecCount"){
		return TriggerGetExecCount(libGalExe_trigger(player, params[0]));
	}

	else if(function == "TriggerGetEvalCount"){
		return TriggerGetEvalCount(libGalExe_trigger(player, params[0]));
	}

	else if(function == "EventKeyPressed"){
		return EventKeyPressed();
	}

	else if(function == "EventHotkeyPressed"){
		return EventHotkeyPressed();
	}

	else if(function == "EventMouseClickedButton"){
		return EventMouseClickedButton();
	}

	else if(function == "EventMouseClickedPosXUI"){
		return EventMouseClickedPosXUI();
	}

	else if(function == "EventMouseClickedPosYUI"){
		return EventMouseClickedPosYUI();
	}

	else if(function == "EventMouseMovedPosXUI"){
		return EventMouseMovedPosXUI();
	}

	else if(function == "EventMouseMovedPosYUI"){
		return EventMouseMovedPosYUI();
	}

	else if(function == "libNtve_gf__BB_PortraitBorderWidth"){
		return libNtve_gf__BB_PortraitBorderWidth(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf__BB_PortraitBorderHeight"){
		return libNtve_gf__BB_PortraitBorderHeight(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf__BB_PortraitWidth"){
		return libNtve_gf__BB_PortraitWidth(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf__BB_PortraitHeight"){
		return libNtve_gf__BB_PortraitHeight(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf__BB_TitleBarWidth"){
		return libNtve_gf__BB_TitleBarWidth(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf__BB_TitleBarHeight"){
		return libNtve_gf__BB_TitleBarHeight(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf__BB_HPBorderWidth"){
		return libNtve_gf__BB_HPBorderWidth(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf__BB_HPBorderHeight"){
		return libNtve_gf__BB_HPBorderHeight(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf__BB_HPBarWidth"){
		return libNtve_gf__BB_HPBarWidth(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf__BB_HPBarHeight"){
		return libNtve_gf__BB_HPBarHeight(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf__BB_HPBarCurrentWidth"){
		return libNtve_gf__BB_HPBarCurrentWidth(libGalExe_int(player, params[0]));
	}

	else if(function == "EventTargetModeState"){
		return EventTargetModeState();
	}

	else if(function == "EventResourceRequestAmount"){
		return EventResourceRequestAmount(libGalExe_int(player, params[0]));
	}

	else if(function == "EventResourceTradeAmount"){
		return EventResourceTradeAmount(libGalExe_int(player, params[0]));
	}

	else if(function == "EventResourceTradeRecipient"){
		return EventResourceTradeRecipient();
	}

	else if(function == "HelpPanelLastCreatedHelpItem"){
		return HelpPanelLastCreatedHelpItem();
	}

	else if(function == "EventCommandErrorValue"){
		return EventCommandErrorValue();
	}

	else if(function == "EventGameMenuItemSelected"){
		return EventGameMenuItemSelected();
	}

	else if(function == "EventCustomDialogResult"){
		return EventCustomDialogResult();
	}

	else if(function == "UIGetChallengeHighScore"){
		return UIGetChallengeHighScore(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "PathGetMinimumStepCount"){
		return PathGetMinimumStepCount(libGalExe_int(player, params[0]));
	}

	else if(function == "EventUnitOwnerOld"){
		return EventUnitOwnerOld();
	}

	else if(function == "EventUnitOwnerNew"){
		return EventUnitOwnerNew();
	}

	else if(function == "UnitGetOwner"){
		return UnitGetOwner(libGalExe_unit(player, params[0]));
	}

	else if(function == "libNtve_gf_KillingPlayer"){
		return libNtve_gf_KillingPlayer();
	}

	else if(function == "EventUnitDamageSourcePlayer"){
		return EventUnitDamageSourcePlayer();
	}

	else if(function == "EventUnitDamageKillXP"){
		return EventUnitDamageKillXP();
	}

	else if(function == "EventUnitHealLaunchPlayer"){
		return EventUnitHealLaunchPlayer();
	}

	else if(function == "EventUnitHealVital"){
		return EventUnitHealVital();
	}

	else if(function == "UnitOrderCount"){
		return UnitOrderCount(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitRallyPoint"){
		return UnitRallyPoint(libGalExe_unit(player, params[0]), libGalExe_unit(player, params[1]));
	}

	else if(function == "UnitRallyPointCount"){
		return UnitRallyPointCount(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitRallyPointTargetCount"){
		return UnitRallyPointTargetCount(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitGetTag"){
		return UnitGetTag(libGalExe_unit(player, params[0]));
	}

	else if(function == "EventUnitProperty"){
		return EventUnitProperty();
	}

	else if(function == "EventUnitPropertyChangeInt"){
		return EventUnitPropertyChangeInt();
	}

	else if(function == "libNtve_gf_UnitGetPropertyKills"){
		return libNtve_gf_UnitGetPropertyKills(libGalExe_unit(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "libNtve_gf_UnitGetPropertyResources"){
		return libNtve_gf_UnitGetPropertyResources(libGalExe_unit(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "UnitTypeGetCost"){
		return UnitTypeGetCost(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitFilterGetState"){
		return UnitFilterGetState(libGalExe_unitfilter(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitCargoValue"){
		return UnitCargoValue(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitInventoryContainer"){
		return UnitInventoryContainer(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitInventorySlot"){
		return UnitInventorySlot(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitInventoryIndex"){
		return UnitInventoryIndex(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitInventoryCount"){
		return UnitInventoryCount(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "EventUnitInventoryChange"){
		return EventUnitInventoryChange();
	}

	else if(function == "EventUnitInventoryItemContainer"){
		return EventUnitInventoryItemContainer();
	}

	else if(function == "EventUnitInventoryItemSlot"){
		return EventUnitInventoryItemSlot();
	}

	else if(function == "EventUnitAbilityStage"){
		return EventUnitAbilityStage();
	}

	else if(function == "UnitAbilityCount"){
		return UnitAbilityCount(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitAbilityGetLevel"){
		return UnitAbilityGetLevel(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitAbilityMaxLevel"){
		return UnitAbilityMaxLevel(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitBehaviorCountAll"){
		return UnitBehaviorCountAll(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitBehaviorCount"){
		return UnitBehaviorCount(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitBehaviorEffectPlayer"){
		return UnitBehaviorEffectPlayer(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "EventUnitBehaviorChange"){
		return EventUnitBehaviorChange();
	}

	else if(function == "UnitWeaponCount"){
		return UnitWeaponCount(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitMagazineCount"){
		return UnitMagazineCount(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitXPGetXPForLevel"){
		return UnitXPGetXPForLevel(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitXPGetCurrentLevel"){
		return UnitXPGetCurrentLevel(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitXPGetNumLevels"){
		return UnitXPGetNumLevels(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "EventUnitAttributePoints"){
		return EventUnitAttributePoints();
	}

	else if(function == "UnitLevel"){
		return UnitLevel(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitQueueItemCount"){
		return UnitQueueItemCount(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitQueueGetProperty"){
		return UnitQueueGetProperty(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitTypeMoveBlockersFromPoint"){
		return UnitTypeMoveBlockersFromPoint(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_point(player, params[2]), libGalExe_fixed(player, params[3]));
	}

	else if(function == "UnitTypeMoveBlockersFromUnit"){
		return UnitTypeMoveBlockersFromUnit(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_unit(player, params[2]), libGalExe_fixed(player, params[3]));
	}

	else if(function == "UnitCount"){
		return UnitCount(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_region(player, params[2]), libGalExe_unitfilter(player, params[3]), libGalExe_int(player, params[4]));
	}

	else if(function == "UnitCountAlliance"){
		return UnitCountAlliance(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_region(player, params[2]), libGalExe_unitfilter(player, params[3]), libGalExe_int(player, params[4]));
	}

	else if(function == "UnitGroupCount"){
		return UnitGroupCount(libGalExe_unitgroup(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UserDataInstanceCount"){
		return UserDataInstanceCount(libGalExe_string(player, params[0]));
	}

	else if(function == "libNtve_gf_UserDataInstanceGetIndex"){
		return libNtve_gf_UserDataInstanceGetIndex(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UserDataFieldCount"){
		return UserDataFieldCount(libGalExe_string(player, params[0]));
	}

	else if(function == "UserDataFieldType"){
		return UserDataFieldType(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UserDataFieldValueCount"){
		return UserDataFieldValueCount(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UserDataGetCompare"){
		return UserDataGetCompare(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetImageEdge"){
		return UserDataGetImageEdge(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UserDataGetInt"){
		return UserDataGetInt(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "IntLoopCurrent"){
		return IntLoopCurrent();
	}

	else if(function == "PlayerGroupLoopCurrent"){
		return PlayerGroupLoopCurrent();
	}

	else if(function == "MarkerGetCastingPlayer"){
		return MarkerGetCastingPlayer(libGalExe_marker(player, params[0]));
	}

	else if(function == "PlayerBeaconBuildMenuCurrentGet"){
		return PlayerBeaconBuildMenuCurrentGet(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerGroupNextPlayer"){
		return PlayerGroupNextPlayer(libGalExe_playergroup(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TechTreeBehaviorProducedAbilCmdCount"){
		return TechTreeBehaviorProducedAbilCmdCount(libGalExe_string(player, params[0]));
	}

	else if(function == "TechTreeUnitCountEx"){
		return TechTreeUnitCountEx(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UnitGetPropertyInt"){
		return UnitGetPropertyInt(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_bool(player, params[2]));
	}

	else if(function == "UnitMarkerCount"){
		return UnitMarkerCount(libGalExe_unit(player, params[0]), libGalExe_marker(player, params[1]));
	}
	else if(function == "DialogCreate"){
		return DialogCreate(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]), libGalExe_int(player, params[4]), libGalExe_bool(player, params[5]));
	}
	else if(function == "Add"){
		return libGalExe_int(player, params[0]) + libGalExe_int(player, params[1]);
	}
	else if(function == "Subtract"){
		return libGalExe_int(player, params[0]) - libGalExe_int(player, params[1]);
	}
	else if(function == "Multiply"){
		return libGalExe_int(player, params[0]) * libGalExe_int(player, params[1]);
	}
	else if(function == "Divide"){
		return libGalExe_int(player, params[0]) / libGalExe_int(player, params[1]);
	}
	else if(function == "LeftShift"){
		return libGalExe_int(player, params[0]) << libGalExe_int(player, params[1]);
	}
	else if(function == "RightShift"){
		return libGalExe_int(player, params[0]) >> libGalExe_int(player, params[1]);
	}
	return StringToInt(param);
}




fixed libGalExe_fixed(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "libNtve_gf_DifficultyValueFixed"){
		return libNtve_gf_DifficultyValueFixed(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_fixed(player, params[2]), libGalExe_fixed(player, params[3]));
	}

	else if(function == "AnimLengthSync"){
		return AnimLengthSync(libGalExe_generichandle(player, params[0]));
	}

	else if(function == "AnimLengthRemainingSync"){
		return AnimLengthRemainingSync(libGalExe_generichandle(player, params[0]));
	}

	else if(function == "BankValueGetAsFixed"){
		return BankValueGetAsFixed(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "CameraGetPitch"){
		return CameraGetPitch(libGalExe_int(player, params[0]));
	}

	else if(function == "CameraGetYaw"){
		return CameraGetYaw(libGalExe_int(player, params[0]));
	}

	else if(function == "CameraGetDistance"){
		return CameraGetDistance(libGalExe_int(player, params[0]));
	}

	else if(function == "CameraInfoGetValue"){
		return CameraInfoGetValue(libGalExe_camerainfo(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_CatalogFieldValueGetAsReal"){
		return libNtve_gf_CatalogFieldValueGetAsReal(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "libNtve_gf_CatalogReferenceGetAsReal"){
		return libNtve_gf_CatalogReferenceGetAsReal(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_CostOfAbility"){
		return libNtve_gf_CostOfAbility(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ConversationDataStateFixedValue"){
		return ConversationDataStateFixedValue(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "StringToFixed"){
		return StringToFixed(libGalExe_string(player, params[0]));
	}

	else if(function == "IntToFixed"){
		return IntToFixed(libGalExe_int(player, params[0]));
	}

	else if(function == "ColorGetComponent"){
		return ColorGetComponent(libGalExe_color(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DataTableGetFixed"){
		return DataTableGetFixed(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DialogGetTransparency"){
		return DialogGetTransparency(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogControlGetPropertyAsFixed"){
		return DialogControlGetPropertyAsFixed(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "libNtve_gf_DialogItemValue"){
		return libNtve_gf_DialogItemValue(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_DialogItemMaximumValue"){
		return libNtve_gf_DialogItemMaximumValue(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_DialogItemMinimumValue"){
		return libNtve_gf_DialogItemMinimumValue(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetMinXValue"){
		return DialogControlGetMinXValue(libGalExe_int(player, params[0]), libGalExe_playergroup(player, params[1]));
	}

	else if(function == "DialogControlGetMaxXValue"){
		return DialogControlGetMaxXValue(libGalExe_int(player, params[0]), libGalExe_playergroup(player, params[1]));
	}

	else if(function == "DialogControlGetMinYValue"){
		return DialogControlGetMinYValue(libGalExe_int(player, params[0]), libGalExe_playergroup(player, params[1]));
	}

	else if(function == "DialogControlGetMaxYValue"){
		return DialogControlGetMaxYValue(libGalExe_int(player, params[0]), libGalExe_playergroup(player, params[1]));
	}

	else if(function == "EffectHistoryGetAmountFixed"){
		return EffectHistoryGetAmountFixed(libGalExe_effecthistory(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_bool(player, params[3]));
	}

	else if(function == "EffectHistoryGetTime"){
		return EffectHistoryGetTime(libGalExe_effecthistory(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "GameTimeOfDayGetLength"){
		return GameTimeOfDayGetLength();
	}

	else if(function == "WorldHeight"){
		return WorldHeight(libGalExe_int(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "PointPathingCliffLevel"){
		return PointPathingCliffLevel(libGalExe_point(player, params[0]));
	}

	else if(function == "EventPlayerEffectUsedAmountFixed"){
		return EventPlayerEffectUsedAmountFixed(libGalExe_int(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "libNtve_gf_GamePlayTime"){
		return libNtve_gf_GamePlayTime(libGalExe_int(player, params[0]));
	}

	else if(function == "GameGetMissionTime"){
		return GameGetMissionTime();
	}

	else if(function == "GameGetSpeed"){
		return GameGetSpeed();
	}

	else if(function == "GameGetGlobalTimeScale"){
		return GameGetGlobalTimeScale();
	}

	else if(function == "GameGetAbsoluteTimeRemaining"){
		return GameGetAbsoluteTimeRemaining();
	}

	else if(function == "GameGetChargeRegen"){
		return GameGetChargeRegen(libGalExe_string(player, params[0]));
	}

	else if(function == "GameGetChargeRegenFull"){
		return GameGetChargeRegenFull(libGalExe_string(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "GameGetChargeUsed"){
		return GameGetChargeUsed(libGalExe_string(player, params[0]));
	}

	else if(function == "GameGetCooldown"){
		return GameGetCooldown(libGalExe_string(player, params[0]));
	}

	else if(function == "AbsF"){
		return AbsF(libGalExe_fixed(player, params[0]));
	}

	else if(function == "Ceiling"){
		return Ceiling(libGalExe_fixed(player, params[0]));
	}

	else if(function == "libNtve_gf_ArithmeticRealClamp"){
		return libNtve_gf_ArithmeticRealClamp(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_fixed(player, params[2]));
	}

	else if(function == "Floor"){
		return Floor(libGalExe_fixed(player, params[0]));
	}

	else if(function == "Log2"){
		return Log2(libGalExe_fixed(player, params[0]));
	}

	else if(function == "libNtve_gf_Log"){
		return libNtve_gf_Log(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "ModF"){
		return ModF(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "Pow"){
		return Pow(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "Round"){
		return Round(libGalExe_fixed(player, params[0]));
	}

	else if(function == "Pow2"){
		return Pow2(libGalExe_fixed(player, params[0]));
	}

	else if(function == "SquareRoot"){
		return SquareRoot(libGalExe_fixed(player, params[0]));
	}

	else if(function == "Trunc"){
		return Trunc(libGalExe_fixed(player, params[0]));
	}

	else if(function == "MinF"){
		return MinF(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "MaxF"){
		return MaxF(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "RandomFixed"){
		return RandomFixed(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "libNtve_gf_RandomPercent"){
		return libNtve_gf_RandomPercent();
	}

	else if(function == "libNtve_gf_RandomAngle"){
		return libNtve_gf_RandomAngle();
	}

	else if(function == "Sin"){
		return Sin(libGalExe_fixed(player, params[0]));
	}

	else if(function == "Cos"){
		return Cos(libGalExe_fixed(player, params[0]));
	}

	else if(function == "Tan"){
		return Tan(libGalExe_fixed(player, params[0]));
	}

	else if(function == "ASin"){
		return ASin(libGalExe_fixed(player, params[0]));
	}

	else if(function == "ACos"){
		return ACos(libGalExe_fixed(player, params[0]));
	}

	else if(function == "ATan2"){
		return ATan2(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]));
	}

	else if(function == "ATan"){
		return ATan(libGalExe_fixed(player, params[0]));
	}

	else if(function == "PingGetRotation"){
		return PingGetRotation(libGalExe_int(player, params[0]));
	}

	else if(function == "PingGetScale"){
		return PingGetScale(libGalExe_int(player, params[0]));
	}

	else if(function == "PingGetDepth"){
		return PingGetDepth(libGalExe_int(player, params[0]));
	}

	else if(function == "PingGetDuration"){
		return PingGetDuration(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerGetPropertyFixed"){
		return PlayerGetPropertyFixed(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerScoreValueGetAsFixed"){
		return PlayerScoreValueGetAsFixed(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "EventPlayerPropertyChangeFixed"){
		return EventPlayerPropertyChangeFixed();
	}

	else if(function == "PlayerGetChargeRegen"){
		return PlayerGetChargeRegen(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "PlayerGetChargeRegenFull"){
		return PlayerGetChargeRegenFull(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_bool(player, params[2]));
	}

	else if(function == "PlayerGetChargeUsed"){
		return PlayerGetChargeUsed(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "PlayerGetCooldown"){
		return PlayerGetCooldown(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "PointGetX"){
		return PointGetX(libGalExe_point(player, params[0]));
	}

	else if(function == "PointGetY"){
		return PointGetY(libGalExe_point(player, params[0]));
	}

	else if(function == "PointGetFacing"){
		return PointGetFacing(libGalExe_point(player, params[0]));
	}

	else if(function == "PointGetHeight"){
		return PointGetHeight(libGalExe_point(player, params[0]));
	}

	else if(function == "AngleBetweenPoints"){
		return AngleBetweenPoints(libGalExe_point(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "DistanceBetweenPoints"){
		return DistanceBetweenPoints(libGalExe_point(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "DistanceSquaredBetweenPoints"){
		return DistanceSquaredBetweenPoints(libGalExe_point(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "libNtve_gf_WidthOfRegion"){
		return libNtve_gf_WidthOfRegion(libGalExe_region(player, params[0]));
	}

	else if(function == "libNtve_gf_HeightOfRegion"){
		return libNtve_gf_HeightOfRegion(libGalExe_region(player, params[0]));
	}

	else if(function == "SoundLengthSync"){
		return SoundLengthSync(libGalExe_soundlink(player, params[0]));
	}

	else if(function == "TimerGetDuration"){
		return TimerGetDuration(libGalExe_timer(player, params[0]));
	}

	else if(function == "TimerGetElapsed"){
		return TimerGetElapsed(libGalExe_timer(player, params[0]));
	}

	else if(function == "TimerGetRemaining"){
		return TimerGetRemaining(libGalExe_timer(player, params[0]));
	}

	else if(function == "EventMouseClickedPosXWorld"){
		return EventMouseClickedPosXWorld();
	}

	else if(function == "EventMouseClickedPosYWorld"){
		return EventMouseClickedPosYWorld();
	}

	else if(function == "EventMouseClickedPosZWorld"){
		return EventMouseClickedPosZWorld();
	}

	else if(function == "EventMouseMovedPosXWorld"){
		return EventMouseMovedPosXWorld();
	}

	else if(function == "EventMouseMovedPosYWorld"){
		return EventMouseMovedPosYWorld();
	}

	else if(function == "EventMouseMovedPosZWorld"){
		return EventMouseMovedPosZWorld();
	}

	else if(function == "EventMouseWheelSpin"){
		return EventMouseWheelSpin();
	}

	else if(function == "PathGetLineTileLength"){
		return PathGetLineTileLength(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PathGetLineWidth"){
		return PathGetLineWidth(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PathGetStepMidpoint"){
		return PathGetStepMidpoint(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PathGetStepModelScale"){
		return PathGetStepModelScale(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PathGetMinimumLinearDistance"){
		return PathGetMinimumLinearDistance(libGalExe_int(player, params[0]));
	}

	else if(function == "PathGetMinimumTravelDistance"){
		return PathGetMinimumTravelDistance(libGalExe_int(player, params[0]));
	}

	else if(function == "UnitGetFacing"){
		return UnitGetFacing(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitGetCustomValue"){
		return UnitGetCustomValue(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitGetDamageDealtTime"){
		return UnitGetDamageDealtTime(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitGetDamageTakenTime"){
		return UnitGetDamageTakenTime(libGalExe_unit(player, params[0]));
	}

	else if(function == "EventUnitDamageAmount"){
		return EventUnitDamageAmount();
	}

	else if(function == "EventUnitDamageAttempted"){
		return EventUnitDamageAttempted();
	}

	else if(function == "EventUnitDamageAttemptedVitals"){
		return EventUnitDamageAttemptedVitals();
	}

	else if(function == "EventUnitDamageAbsorbed"){
		return EventUnitDamageAbsorbed();
	}

	else if(function == "EventUnitDamageBehaviorShield"){
		return EventUnitDamageBehaviorShield();
	}

	else if(function == "EventUnitDamageVitalsLeeched"){
		return EventUnitDamageVitalsLeeched(libGalExe_int(player, params[0]));
	}

	else if(function == "EventUnitHealAmount"){
		return EventUnitHealAmount();
	}

	else if(function == "UnitOrderGetProgress"){
		return UnitOrderGetProgress(libGalExe_unit(player, params[0]));
	}

	else if(function == "EventUnitPropertyChangeFixed"){
		return EventUnitPropertyChangeFixed();
	}

	else if(function == "UnitGetPropertyFixed"){
		return UnitGetPropertyFixed(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_bool(player, params[2]));
	}

	else if(function == "UnitTypeGetProperty"){
		return UnitTypeGetProperty(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitGetHeight"){
		return UnitGetHeight(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitBehaviorDuration"){
		return UnitBehaviorDuration(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitBehaviorDurationTotal"){
		return UnitBehaviorDurationTotal(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitBehaviorDamageModifyRemaining"){
		return UnitBehaviorDamageModifyRemaining(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitBehaviorDamageModifyLimit"){
		return UnitBehaviorDamageModifyLimit(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitWeaponPeriod"){
		return UnitWeaponPeriod(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitWeaponRange"){
		return UnitWeaponRange(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitWeaponPeriodRemaining"){
		return UnitWeaponPeriodRemaining(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitWeaponDamage"){
		return UnitWeaponDamage(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_bool(player, params[3]));
	}

	else if(function == "UnitWeaponSpeedMultiplier"){
		return UnitWeaponSpeedMultiplier(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitXPGetCurrentXP"){
		return UnitXPGetCurrentXP(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "EventUnitXPDelta"){
		return EventUnitXPDelta();
	}

	else if(function == "UnitXPTotal"){
		return UnitXPTotal(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitGetProgressComplete"){
		return UnitGetProgressComplete(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitQueueItemTime"){
		return UnitQueueItemTime(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitBehaviorGetChargeRegen"){
		return UnitBehaviorGetChargeRegen(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "UnitAbilityGetChargeRegen"){
		return UnitAbilityGetChargeRegen(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "UnitGetChargeRegen"){
		return UnitGetChargeRegen(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitBehaviorGetChargeRegenFull"){
		return UnitBehaviorGetChargeRegenFull(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_bool(player, params[3]));
	}

	else if(function == "UnitAbilityGetChargeRegenFull"){
		return UnitAbilityGetChargeRegenFull(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_bool(player, params[3]));
	}

	else if(function == "UnitGetChargeRegenFull"){
		return UnitGetChargeRegenFull(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_bool(player, params[2]));
	}

	else if(function == "UnitBehaviorGetChargeUsed"){
		return UnitBehaviorGetChargeUsed(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "UnitAbilityGetChargeUsed"){
		return UnitAbilityGetChargeUsed(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "UnitGetChargeUsed"){
		return UnitGetChargeUsed(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitBehaviorGetCooldown"){
		return UnitBehaviorGetCooldown(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "UnitAbilityGetCooldown"){
		return UnitAbilityGetCooldown(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "UnitGetCooldown"){
		return UnitGetCooldown(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitAbilityChargeInfo"){
		return UnitAbilityChargeInfo(libGalExe_unit(player, params[0]), libGalExe_abilcmd(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UserDataGetFixed"){
		return UserDataGetFixed(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "VisGetFoWAlpha"){
		return VisGetFoWAlpha(libGalExe_int(player, params[0]));
	}

	else if(function == "UnitAbilityEffectInstantGetRange"){
		return UnitAbilityEffectInstantGetRange(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}
	else if(function == "Add"){
		return libGalExe_fixed(player, params[0]) + libGalExe_fixed(player, params[1]);
	}
	else if(function == "Subtract"){
		return libGalExe_fixed(player, params[0]) - libGalExe_fixed(player, params[1]);
	}
	else if(function == "Multiply"){
		return libGalExe_fixed(player, params[0]) * libGalExe_fixed(player, params[1]);
	}
	else if(function == "Divide"){
		return libGalExe_fixed(player, params[0]) / libGalExe_fixed(player, params[1]);
	}
	return StringToFixed(param);
}




bool libGalExe_bool(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "InShrub"){
		return InShrub(libGalExe_point(player, params[0]));
	}

	else if(function == "PlayerBeaconIsAutoCast"){
		return PlayerBeaconIsAutoCast(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerBeaconIsFromUser"){
		return PlayerBeaconIsFromUser(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerBeaconIsSet"){
		return PlayerBeaconIsSet(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "BankValueGetAsFlag"){
		return BankValueGetAsFlag(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "BankExists"){
		return BankExists(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "BankKeyExists"){
		return BankKeyExists(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "BankOptionGet"){
		return BankOptionGet(libGalExe_bank(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "BankSectionExists"){
		return BankSectionExists(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "BankValueIsType"){
		return BankValueIsType(libGalExe_bank(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "BankConditionEvaluate"){
		return BankConditionEvaluate(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "BankVerify"){
		return BankVerify(libGalExe_bank(player, params[0]));
	}

	else if(function == "BitMaskIsEqual"){
		return BitMaskIsEqual(libGalExe_bitmask(player, params[0]), libGalExe_bitmask(player, params[1]));
	}

	else if(function == "BitMaskTrueIndex"){
		return BitMaskTrueIndex(libGalExe_bitmask(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "BitMaskFalseIndex"){
		return BitMaskFalseIndex(libGalExe_bitmask(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "CatalogEntryIsDefault"){
		return CatalogEntryIsDefault(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "CatalogEntryIsValid"){
		return CatalogEntryIsValid(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "CatalogFieldExists"){
		return CatalogFieldExists(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "CatalogFieldIsArray"){
		return CatalogFieldIsArray(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "CatalogFieldIsScope"){
		return CatalogFieldIsScope(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "CatalogFieldValueSet"){
		return CatalogFieldValueSet(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]), libGalExe_string(player, params[4]));
	}

	else if(function == "libNtve_gf_CatalogFieldValueSetAsReal"){
		return libNtve_gf_CatalogFieldValueSetAsReal(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]), libGalExe_fixed(player, params[4]));
	}

	else if(function == "CatalogFieldValueModify"){
		return CatalogFieldValueModify(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]), libGalExe_string(player, params[4]), libGalExe_int(player, params[5]));
	}

	else if(function == "libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue"){
		return libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]), libGalExe_fixed(player, params[4]), libGalExe_int(player, params[5]));
	}

	else if(function == "CatalogReferenceSet"){
		return CatalogReferenceSet(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_string(player, params[2]));
	}

	else if(function == "libNtve_gf_CatalogReferenceSetAsReal"){
		return libNtve_gf_CatalogReferenceSetAsReal(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_fixed(player, params[2]));
	}

	else if(function == "CatalogReferenceModify"){
		return CatalogReferenceModify(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "libNtve_gf_CatalogReferenceModifyBasedOnDefaultValue"){
		return libNtve_gf_CatalogReferenceModifyBasedOnDefaultValue(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_fixed(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "libNtve_gf__CineModeFogSetting"){
		return libNtve_gf__CineModeFogSetting(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf__CineModeMaskSetting"){
		return libNtve_gf__CineModeMaskSetting(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf_PlayerInCinematicMode"){
		return libNtve_gf_PlayerInCinematicMode(libGalExe_int(player, params[0]));
	}

	else if(function == "ConversationVisible"){
		return ConversationVisible(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "ConversationDataCanRun"){
		return ConversationDataCanRun(libGalExe_string(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "ConversationDataChoiceGetPicked"){
		return ConversationDataChoiceGetPicked(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "ConversationDataWasSkipped"){
		return ConversationDataWasSkipped();
	}

	else if(function == "libNtve_gf_ConvertStringToBoolean"){
		return libNtve_gf_ConvertStringToBoolean(libGalExe_string(player, params[0]));
	}

	else if(function == "DataTableGetBool"){
		return DataTableGetBool(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DataTableValueExists"){
		return DataTableValueExists(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DateTimeIsBefore"){
		return DateTimeIsBefore(libGalExe_datetime(player, params[0]), libGalExe_datetime(player, params[1]));
	}

	else if(function == "DateTimeIsAfter"){
		return DateTimeIsAfter(libGalExe_datetime(player, params[0]), libGalExe_datetime(player, params[1]));
	}

	else if(function == "libNtve_gf_DateTimeisBetween"){
		return libNtve_gf_DateTimeisBetween(libGalExe_datetime(player, params[0]), libGalExe_datetime(player, params[1]), libGalExe_datetime(player, params[2]));
	}

	else if(function == "libNtve_gf_DateTimeisWeekend"){
		return libNtve_gf_DateTimeisWeekend(libGalExe_datetime(player, params[0]));
	}

	else if(function == "libNtve_gf_DateTimeisMorning"){
		return libNtve_gf_DateTimeisMorning(libGalExe_datetime(player, params[0]));
	}

	else if(function == "libNtve_gf_DateTimeisAfternoon"){
		return libNtve_gf_DateTimeisAfternoon(libGalExe_datetime(player, params[0]));
	}

	else if(function == "libNtve_gf_DateTimeisEvening"){
		return libNtve_gf_DateTimeisEvening(libGalExe_datetime(player, params[0]));
	}

	else if(function == "DialogIsVisible"){
		return DialogIsVisible(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogIsFullscreen"){
		return DialogIsFullscreen(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogIsEnabled"){
		return DialogIsEnabled(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogIsOffscreen"){
		return DialogIsOffscreen(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogIsModal"){
		return DialogIsModal(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogIsImageVisible"){
		return DialogIsImageVisible(libGalExe_int(player, params[0]));
	}

	else if(function == "DialogControlIsVisible"){
		return DialogControlIsVisible(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlIsEnabled"){
		return DialogControlIsEnabled(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlIsFullDialog"){
		return DialogControlIsFullDialog(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "DialogControlGetPropertyAsBool"){
		return DialogControlGetPropertyAsBool(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "libNtve_gf_DialogItemIsChecked"){
		return libNtve_gf_DialogItemIsChecked(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "GameTimeOfDayIsPaused"){
		return GameTimeOfDayIsPaused();
	}

	else if(function == "CrossCliff"){
		return CrossCliff(libGalExe_point(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "HasCustomCellAttribute"){
		return HasCustomCellAttribute(libGalExe_point(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "CreepIsPresent"){
		return CreepIsPresent(libGalExe_point(player, params[0]));
	}

	else if(function == "PowerIsProvidedBy"){
		return PowerIsProvidedBy(libGalExe_int(player, params[0]), libGalExe_point(player, params[1]), libGalExe_string(player, params[2]), libGalExe_unit(player, params[3]), libGalExe_int(player, params[4]));
	}

	else if(function == "libNtve_gf_PlayerCanCreateEffectAtPoint"){
		return libNtve_gf_PlayerCanCreateEffectAtPoint(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_point(player, params[2]));
	}

	else if(function == "libNtve_gf_PlayerCanCreateEffectOnUnit"){
		return libNtve_gf_PlayerCanCreateEffectOnUnit(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_unit(player, params[2]));
	}

	else if(function == "libNtve_gf_UnitCanCreateEffectAtPoint"){
		return libNtve_gf_UnitCanCreateEffectAtPoint(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_point(player, params[2]));
	}

	else if(function == "libNtve_gf_UnitCanCreateEffectOnUnit"){
		return libNtve_gf_UnitCanCreateEffectOnUnit(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_unit(player, params[2]));
	}

	else if(function == "GameIsMissionTimePaused"){
		return GameIsMissionTimePaused();
	}

	else if(function == "GameIsSpeedLocked"){
		return GameIsSpeedLocked();
	}

	else if(function == "GameIsSeedLocked"){
		return GameIsSeedLocked();
	}

	else if(function == "GameGetAbsoluteTimeRemainingPaused"){
		return GameGetAbsoluteTimeRemainingPaused();
	}

	else if(function == "GameMapIsBlizzard"){
		return GameMapIsBlizzard();
	}

	else if(function == "GameIsTestMap"){
		return GameIsTestMap(libGalExe_bool(player, params[0]));
	}

	else if(function == "GameIsExaminable"){
		return GameIsExaminable();
	}

	else if(function == "GameIsOnline"){
		return GameIsOnline();
	}

	else if(function == "GameIsDebugOptionSet"){
		return GameIsDebugOptionSet(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "GameIsMatchmade"){
		return GameIsMatchmade();
	}

	else if(function == "GameIsCompetitive"){
		return GameIsCompetitive();
	}

	else if(function == "GameIsPractice"){
		return GameIsPractice();
	}

	else if(function == "GameIsCooperative"){
		return GameIsCooperative();
	}

	else if(function == "GameAreHeroDuplicatesAllowed"){
		return GameAreHeroDuplicatesAllowed();
	}

	else if(function == "ConsoleCommand"){
		return ConsoleCommand(libGalExe_string(player, params[0]), libGalExe_bool(player, params[1]), libGalExe_bool(player, params[2]));
	}

	else if(function == "GameCheatsEnabled"){
		return GameCheatsEnabled(libGalExe_int(player, params[0]));
	}

	else if(function == "GameIsTransitionMap"){
		return GameIsTransitionMap();
	}

	else if(function == "AchievementsDisabled"){
		return AchievementsDisabled(libGalExe_int(player, params[0]));
	}

	else if(function == "MeleeGetOption"){
		return MeleeGetOption(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "ObjectiveVisible"){
		return ObjectiveVisible(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "ObjectiveGetPrimary"){
		return ObjectiveGetPrimary(libGalExe_int(player, params[0]));
	}

	else if(function == "OrderGetFlag"){
		return OrderGetFlag(libGalExe_order(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitOrderIsValid"){
		return UnitOrderIsValid(libGalExe_unit(player, params[0]), libGalExe_order(player, params[1]));
	}

	else if(function == "EventPingUnitIsUnderConstruction"){
		return EventPingUnitIsUnderConstruction();
	}

	else if(function == "EventPingedMinimap"){
		return EventPingedMinimap();
	}

	else if(function == "PingIsVisible"){
		return PingIsVisible(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerGetState"){
		return PlayerGetState(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerHasLicense"){
		return PlayerHasLicense(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerHasAccessTo"){
		return PlayerHasAccessTo(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "PlayerHasReward"){
		return PlayerHasReward(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "PlayerHasTalent"){
		return PlayerHasTalent(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "PlayerHasLabel"){
		return PlayerHasLabel(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "PlayerGetAlliance"){
		return PlayerGetAlliance(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "libNtve_gf_PlayerIsEnemy"){
		return libNtve_gf_PlayerIsEnemy(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "DifficultyEnabled"){
		return DifficultyEnabled(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerGroupHasPlayer"){
		return PlayerGroupHasPlayer(libGalExe_playergroup(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "RegionContainsPoint"){
		return RegionContainsPoint(libGalExe_region(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "PointPathingPassable"){
		return PointPathingPassable(libGalExe_point(player, params[0]));
	}

	else if(function == "PointPathingIsConnected"){
		return PointPathingIsConnected(libGalExe_point(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "PortraitVisible"){
		return PortraitVisible(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitIsSelected"){
		return UnitIsSelected(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_UnitTypeIsSelected"){
		return libNtve_gf_UnitTypeIsSelected(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PurchaseItemIsRecentlyPurchased"){
		return PurchaseItemIsRecentlyPurchased(libGalExe_int(player, params[0]));
	}

	else if(function == "BattleReportGetDifficultyLevelCompleted"){
		return BattleReportGetDifficultyLevelCompleted(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "ResearchItemIsRecentlyPurchased"){
		return ResearchItemIsRecentlyPurchased(libGalExe_int(player, params[0]));
	}

	else if(function == "MercenaryIsRecentlyPurchased"){
		return MercenaryIsRecentlyPurchased(libGalExe_int(player, params[0]));
	}

	else if(function == "libNtve_gf_PlayerInStoryMode"){
		return libNtve_gf_PlayerInStoryMode(libGalExe_int(player, params[0]));
	}

	else if(function == "StringEqual"){
		return StringEqual(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_bool(player, params[2]));
	}

	else if(function == "StringContains"){
		return StringContains(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]), libGalExe_bool(player, params[3]));
	}

	else if(function == "TalentTreeCanSelectHeroTalentTree"){
		return TalentTreeCanSelectHeroTalentTree(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TalentTreeAllowed"){
		return TalentTreeAllowed(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TechTreeSpecificRequirementEnabled"){
		return TechTreeSpecificRequirementEnabled(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "TechTreeAbilityIsAllowed"){
		return TechTreeAbilityIsAllowed(libGalExe_int(player, params[0]), libGalExe_abilcmd(player, params[1]));
	}

	else if(function == "TechTreeBehaviorIsAllowed"){
		return TechTreeBehaviorIsAllowed(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "TechTreeUnitIsAllowed"){
		return TechTreeUnitIsAllowed(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "TechTreeUpgradeIsAllowed"){
		return TechTreeUpgradeIsAllowed(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "TechTreeRequirementsEnabled"){
		return TechTreeRequirementsEnabled(libGalExe_int(player, params[0]));
	}

	else if(function == "TechTreeRestrictionsEnabled"){
		return TechTreeRestrictionsEnabled(libGalExe_int(player, params[0]));
	}

	else if(function == "TextTagVisible"){
		return TextTagVisible(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TimerIsPaused"){
		return TimerIsPaused(libGalExe_timer(player, params[0]));
	}

	else if(function == "TimerWindowVisible"){
		return TimerWindowVisible(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TransmissionPlayerHasActiveTransmission"){
		return TransmissionPlayerHasActiveTransmission(libGalExe_int(player, params[0]));
	}

	else if(function == "TransmissionIsComplete"){
		return TransmissionIsComplete(libGalExe_int(player, params[0]));
	}

	else if(function == "TriggerIsEnabled"){
		return TriggerIsEnabled(libGalExe_trigger(player, params[0]));
	}

	else if(function == "TriggerEvaluate"){
		return TriggerEvaluate(libGalExe_trigger(player, params[0]));
	}

	else if(function == "TriggerQueueIsEmpty"){
		return TriggerQueueIsEmpty();
	}

	else if(function == "EventKeyControl"){
		return EventKeyControl();
	}

	else if(function == "EventKeyAlt"){
		return EventKeyAlt();
	}

	else if(function == "EventKeyShift"){
		return EventKeyShift();
	}

	else if(function == "libNtve_gf_UIFrameFlagCheck"){
		return libNtve_gf_UIFrameFlagCheck(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UIFrameVisible"){
		return UIFrameVisible(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PathGetVisible"){
		return PathGetVisible(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitPathableToPoint"){
		return UnitPathableToPoint(libGalExe_unit(player, params[0]), libGalExe_point(player, params[1]), libGalExe_fixed(player, params[2]), libGalExe_fixed(player, params[3]));
	}

	else if(function == "UnitPathableToUnit"){
		return UnitPathableToUnit(libGalExe_unit(player, params[0]), libGalExe_unit(player, params[1]), libGalExe_fixed(player, params[2]), libGalExe_fixed(player, params[3]));
	}

	else if(function == "UnitIsAlive"){
		return UnitIsAlive(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitIsValid"){
		return UnitIsValid(libGalExe_unit(player, params[0]));
	}

	else if(function == "libNtve_gf_UnitGroupIsDead"){
		return libNtve_gf_UnitGroupIsDead(libGalExe_unitgroup(player, params[0]));
	}

	else if(function == "libNtve_gf_UnitIsPaused"){
		return libNtve_gf_UnitIsPaused(libGalExe_unit(player, params[0]));
	}

	else if(function == "libNtve_gf_UnitIsSleepiing"){
		return libNtve_gf_UnitIsSleepiing(libGalExe_unit(player, params[0]));
	}

	else if(function == "libNtve_gf_UnitIsHidden"){
		return libNtve_gf_UnitIsHidden(libGalExe_unit(player, params[0]));
	}

	else if(function == "libNtve_gf_UnitIsVisibleToPlayer"){
		return libNtve_gf_UnitIsVisibleToPlayer(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_UnitInRegion"){
		return libNtve_gf_UnitInRegion(libGalExe_unit(player, params[0]), libGalExe_region(player, params[1]));
	}

	else if(function == "EventUnitDamageDeathCheck"){
		return EventUnitDamageDeathCheck(libGalExe_int(player, params[0]));
	}

	else if(function == "UnitIssueOrder"){
		return UnitIssueOrder(libGalExe_unit(player, params[0]), libGalExe_order(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitGroupIssueOrder"){
		return UnitGroupIssueOrder(libGalExe_unitgroup(player, params[0]), libGalExe_order(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitOrderIsAcquired"){
		return UnitOrderIsAcquired(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitOrderHasAbil"){
		return UnitOrderHasAbil(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitTestState"){
		return UnitTestState(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitTypeTestFlag"){
		return UnitTypeTestFlag(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitTypeTestAttribute"){
		return UnitTypeTestAttribute(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitTestPlane"){
		return UnitTestPlane(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_UnitIsInvulnerable"){
		return libNtve_gf_UnitIsInvulnerable(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitTypeIsAffectedByUpgrade"){
		return UnitTypeIsAffectedByUpgrade(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitMoverExists"){
		return UnitMoverExists(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "libNtve_gf_UnitMoverExists"){
		return libNtve_gf_UnitMoverExists(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitFilterMatch"){
		return UnitFilterMatch(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_unitfilter(player, params[2]));
	}

	else if(function == "libNtve_gf_UnitIsInsideTransport"){
		return libNtve_gf_UnitIsInsideTransport(libGalExe_unit(player, params[0]));
	}

	else if(function == "libNtve_gf_UnitIsInsideUnitTransport"){
		return libNtve_gf_UnitIsInsideUnitTransport(libGalExe_unit(player, params[0]));
	}

	else if(function == "libNtve_gf_UnitIsInsidePlayerTransport"){
		return libNtve_gf_UnitIsInsidePlayerTransport(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitAbilityCheck"){
		return UnitAbilityCheck(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]), libGalExe_bool(player, params[2]));
	}

	else if(function == "UnitCheckAbilCmdState"){
		return UnitCheckAbilCmdState(libGalExe_unit(player, params[0]), libGalExe_abilcmd(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitAbilityExists"){
		return UnitAbilityExists(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitHasBehavior"){
		return UnitHasBehavior(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitHasBehavior2"){
		return UnitHasBehavior2(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitBehaviorEnabled"){
		return UnitBehaviorEnabled(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitBehaviorHasFlag"){
		return UnitBehaviorHasFlag(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitWeaponIsEnabled"){
		return UnitWeaponIsEnabled(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitWeaponCheck"){
		return UnitWeaponCheck(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "libNtve_gf_UnitCanAttackUnit"){
		return libNtve_gf_UnitCanAttackUnit(libGalExe_unit(player, params[0]), libGalExe_unit(player, params[1]));
	}

	else if(function == "UnitCanAttackTarget"){
		return UnitCanAttackTarget(libGalExe_unit(player, params[0]), libGalExe_unit(player, params[1]));
	}

	else if(function == "UnitInRangeAndAbleToAttackTarget"){
		return UnitInRangeAndAbleToAttackTarget(libGalExe_unit(player, params[0]), libGalExe_unit(player, params[1]));
	}

	else if(function == "UnitCheckProgressState"){
		return UnitCheckProgressState(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "libNtve_gf_UnitIsUnderConstruction"){
		return libNtve_gf_UnitIsUnderConstruction(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitQueueItemTypeCheck"){
		return UnitQueueItemTypeCheck(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitGroupHasUnit"){
		return UnitGroupHasUnit(libGalExe_unitgroup(player, params[0]), libGalExe_unit(player, params[1]));
	}

	else if(function == "UserDataFieldIsModifiable"){
		return UserDataFieldIsModifiable(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "VisIsEnabled"){
		return VisIsEnabled(libGalExe_int(player, params[0]));
	}

	else if(function == "VisIsVisibleForPlayer"){
		return VisIsVisibleForPlayer(libGalExe_int(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "BattleReportGetShownInMissionTotal"){
		return BattleReportGetShownInMissionTotal(libGalExe_int(player, params[0]));
	}

	else if(function == "GameCheatIsAllowed"){
		return GameCheatIsAllowed(libGalExe_int(player, params[0]));
	}

	else if(function == "GameDataIsFullyDownloaded"){
		return GameDataIsFullyDownloaded(libGalExe_int(player, params[0]));
	}

	else if(function == "IntLoopDone"){
		return IntLoopDone();
	}

	else if(function == "PlayerGroupLoopDone"){
		return PlayerGroupLoopDone();
	}

	else if(function == "UnitGroupLoopDone"){
		return UnitGroupLoopDone();
	}

	else if(function == "MarkerGetMatchFlag"){
		return MarkerGetMatchFlag(libGalExe_marker(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "MarkerGetMismatchFlag"){
		return MarkerGetMismatchFlag(libGalExe_marker(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "OrderSetTargetPlacement"){
		return OrderSetTargetPlacement(libGalExe_order(player, params[0]), libGalExe_point(player, params[1]), libGalExe_unit(player, params[2]), libGalExe_string(player, params[3]));
	}

	else if(function == "PlayerBeaconBuildMenuWasFromPlayer"){
		return PlayerBeaconBuildMenuWasFromPlayer(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PointsInRange"){
		return PointsInRange(libGalExe_point(player, params[0]), libGalExe_point(player, params[1]), libGalExe_fixed(player, params[2]));
	}

	else if(function == "UnitIsHarvesting"){
		return UnitIsHarvesting(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitWeaponsPlaneTest"){
		return UnitWeaponsPlaneTest(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitGroupTestPlane"){
		return UnitGroupTestPlane(libGalExe_unitgroup(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UIGameMenuItemVisible"){
		return UIGameMenuItemVisible(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UICustomMenuItemVisible"){
		return UICustomMenuItemVisible(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}
	return libNtve_gf_ConvertStringToBoolean(param);
}




unitgroup libGalExe_unitgroup(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "CameraFollowUnitGroupGet"){
		return CameraFollowUnitGroupGet(libGalExe_int(player, params[0]));
	}

	else if(function == "DataTableGetUnitGroup"){
		return DataTableGetUnitGroup(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DialogControlGetPropertyAsUnitGroup"){
		return DialogControlGetPropertyAsUnitGroup(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitSubgroupSelected"){
		return UnitSubgroupSelected(libGalExe_int(player, params[0]));
	}

	else if(function == "UnitGroupSelected"){
		return UnitGroupSelected(libGalExe_int(player, params[0]));
	}

	else if(function == "UnitControlGroup"){
		return UnitControlGroup(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UnitConjoinedGroup"){
		return UnitConjoinedGroup(libGalExe_unit(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "UnitCreate"){
		return UnitCreate(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]), libGalExe_point(player, params[4]), libGalExe_fixed(player, params[5]));
	}

	else if(function == "libNtve_gf_UnitCreateFacingPoint"){
		return libNtve_gf_UnitCreateFacingPoint(libGalExe_int(player, params[0]), libGalExe_string(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]), libGalExe_point(player, params[4]), libGalExe_point(player, params[5]));
	}

	else if(function == "UnitLastCreatedGroup"){
		return UnitLastCreatedGroup();
	}

	else if(function == "UnitCargoLastCreatedGroup"){
		return UnitCargoLastCreatedGroup();
	}

	else if(function == "UnitCargoGroup"){
		return UnitCargoGroup(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitInventoryGroup"){
		return UnitInventoryGroup(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitMagazineLastCreatedGroup"){
		return UnitMagazineLastCreatedGroup();
	}

	else if(function == "UnitGroupEmpty"){
		return UnitGroupEmpty();
	}

	else if(function == "UnitGroupIdle"){
		return UnitGroupIdle(libGalExe_int(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "libNtve_gf_ConvertUnitToUnitGroup"){
		return libNtve_gf_ConvertUnitToUnitGroup(libGalExe_unit(player, params[0]));
	}

	else if(function == "UnitGroup"){
		return UnitGroup(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_region(player, params[2]), libGalExe_unitfilter(player, params[3]), libGalExe_int(player, params[4]));
	}

	else if(function == "UnitGroupSearch"){
		return UnitGroupSearch(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_point(player, params[2]), libGalExe_fixed(player, params[3]), libGalExe_unitfilter(player, params[4]), libGalExe_int(player, params[5]));
	}

	else if(function == "UnitGroupAlliance"){
		return UnitGroupAlliance(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_region(player, params[2]), libGalExe_unitfilter(player, params[3]), libGalExe_int(player, params[4]));
	}

	else if(function == "libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition"){
		return libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]), libGalExe_int(player, params[4]), libGalExe_region(player, params[5]), libGalExe_unitfilter(player, params[6]), libGalExe_int(player, params[7]));
	}

	else if(function == "UnitGroupFilterPlayer"){
		return UnitGroupFilterPlayer(libGalExe_unitgroup(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitGroupFilter"){
		return UnitGroupFilter(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]), libGalExe_unitgroup(player, params[2]), libGalExe_unitfilter(player, params[3]), libGalExe_int(player, params[4]));
	}

	else if(function == "UnitGroupFilterPlane"){
		return UnitGroupFilterPlane(libGalExe_unitgroup(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitGroupFilterAlliance"){
		return UnitGroupFilterAlliance(libGalExe_unitgroup(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "libNtve_gf_UnitsInUnitGroupWithCustomValue"){
		return libNtve_gf_UnitsInUnitGroupWithCustomValue(libGalExe_unitgroup(player, params[0]), libGalExe_int(player, params[1]), libGalExe_fixed(player, params[2]));
	}

	else if(function == "UnitGroupFilterRegion"){
		return UnitGroupFilterRegion(libGalExe_unitgroup(player, params[0]), libGalExe_region(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "UnitGroupCopy"){
		return UnitGroupCopy(libGalExe_unitgroup(player, params[0]));
	}

	else if(function == "UnitGroupFromId"){
		return UnitGroupFromId(libGalExe_int(player, params[0]));
	}

	else if(function == "UnitGroupFilterThreat"){
		return UnitGroupFilterThreat(libGalExe_unitgroup(player, params[0]), libGalExe_unit(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}
	return null;
}




wave libGalExe_wave(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "WaveLastCreated"){
		return WaveLastCreated();
	}

	else if(function == "EventPlayerWave"){
		return EventPlayerWave();
	}

	else if(function == "DataTableGetWave"){
		return DataTableGetWave(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}
	return null;
}




playergroup libGalExe_playergroup(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetPlayerGroup"){
		return DataTableGetPlayerGroup(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "GameAttributePlayersForTeam"){
		return GameAttributePlayersForTeam(libGalExe_int(player, params[0]));
	}

	else if(function == "ObjectiveGetPlayerGroup"){
		return ObjectiveGetPlayerGroup(libGalExe_int(player, params[0]));
	}

	else if(function == "PingGetPlayerGroup"){
		return PingGetPlayerGroup(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerGroupAll"){
		return PlayerGroupAll();
	}

	else if(function == "PlayerGroupEmpty"){
		return PlayerGroupEmpty();
	}

	else if(function == "PlayerGroupActive"){
		return PlayerGroupActive();
	}

	else if(function == "PlayerGroupAlliance"){
		return PlayerGroupAlliance(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf"){
		return libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PlayerGroupSingle"){
		return PlayerGroupSingle(libGalExe_int(player, params[0]));
	}

	else if(function == "PlayerGroupCopy"){
		return PlayerGroupCopy(libGalExe_playergroup(player, params[0]));
	}

	else if(function == "libNtve_gf_UnionOfPlayerGroups"){
		return libNtve_gf_UnionOfPlayerGroups(libGalExe_playergroup(player, params[0]), libGalExe_playergroup(player, params[1]));
	}

	else if(function == "libNtve_gf_IntersectionOfPlayerGroups"){
		return libNtve_gf_IntersectionOfPlayerGroups(libGalExe_playergroup(player, params[0]), libGalExe_playergroup(player, params[1]));
	}
	return PlayerGroupSingle(player);
}




order libGalExe_order(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetOrder"){
		return DataTableGetOrder(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "OrderTargetingItem"){
		return OrderTargetingItem(libGalExe_abilcmd(player, params[0]), libGalExe_unit(player, params[1]));
	}

	else if(function == "OrderTargetingPoint"){
		return OrderTargetingPoint(libGalExe_abilcmd(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "libNtve_gf_ReviveOrderTargetingPoint"){
		return libNtve_gf_ReviveOrderTargetingPoint(libGalExe_abilcmd(player, params[0]), libGalExe_point(player, params[1]), libGalExe_unit(player, params[2]));
	}

	else if(function == "OrderTargetingRelativePoint"){
		return OrderTargetingRelativePoint(libGalExe_abilcmd(player, params[0]), libGalExe_point(player, params[1]));
	}

	else if(function == "OrderTargetingUnit"){
		return OrderTargetingUnit(libGalExe_abilcmd(player, params[0]), libGalExe_unit(player, params[1]));
	}

	else if(function == "OrderTargetingUnitGroup"){
		return OrderTargetingUnitGroup(libGalExe_abilcmd(player, params[0]), libGalExe_unitgroup(player, params[1]));
	}

	else if(function == "Order"){
		return Order(libGalExe_abilcmd(player, params[0]));
	}

	else if(function == "libNtve_gf_ReviveOrderWithNoTarget"){
		return libNtve_gf_ReviveOrderWithNoTarget(libGalExe_abilcmd(player, params[0]), libGalExe_unit(player, params[1]));
	}

	else if(function == "OrderSetAutoCast"){
		return OrderSetAutoCast(libGalExe_abilcmd(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "EventUnitOrder"){
		return EventUnitOrder();
	}

	else if(function == "UnitOrder"){
		return UnitOrder(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}
	return null;
}




marker libGalExe_marker(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetMarker"){
		return DataTableGetMarker(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "Marker"){
		return Marker(libGalExe_string(player, params[0]));
	}

	else if(function == "MarkerCastingPlayer"){
		return MarkerCastingPlayer(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "MarkerCastingUnit"){
		return MarkerCastingUnit(libGalExe_string(player, params[0]), libGalExe_unit(player, params[1]));
	}

	else if(function == "UnitMarker"){
		return UnitMarker(libGalExe_unit(player, params[0]), libGalExe_int(player, params[1]));
	}
	return null;
}




waveinfo libGalExe_waveinfo(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetWaveInfo"){
		return DataTableGetWaveInfo(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}
	return null;
}




wavetarget libGalExe_wavetarget(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetWaveTarget"){
		return DataTableGetWaveTarget(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}
	return null;
}




aifilter libGalExe_aifilter(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }
	return null;
}




unitfilter libGalExe_unitfilter(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetUnitFilter"){
		return DataTableGetUnitFilter(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "libNtve_gf_ConvertTargetFilterStringToUnitFilter"){
		return libNtve_gf_ConvertTargetFilterStringToUnitFilter(libGalExe_string(player, params[0]));
	}

	else if(function == "UnitFilter"){
		return UnitFilter(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "UnitFilterStr"){
		return UnitFilterStr(libGalExe_string(player, params[0]));
	}
	return null;
}




bank libGalExe_bank(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "BankLoad"){
		return BankLoad(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "BankLastCreated"){
		return BankLastCreated();
	}

	else if(function == "BankBackupLoopCurrent"){
		return BankBackupLoopCurrent();
	}

	else if(function == "DataTableGetBank"){
		return DataTableGetBank(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}
	return null;
}




bitmask libGalExe_bitmask(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "BitMaskMakeDefaultMask"){
		return BitMaskMakeDefaultMask();
	}
	return null;
}




camerainfo libGalExe_camerainfo(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "CameraInfoDefault"){
		return CameraInfoDefault();
	}

	else if(function == "libNtve_gf_CopyOfCameraObject"){
		return libNtve_gf_CopyOfCameraObject(libGalExe_camerainfo(player, params[0]));
	}

	else if(function == "DataTableGetCameraInfo"){
		return DataTableGetCameraInfo(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "CameraInfoFromId"){
		return CameraInfoFromId(libGalExe_int(player, params[0]));
	}
	return null;
}




color libGalExe_color(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "Color"){
		return Color(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_fixed(player, params[2]));
	}

	else if(function == "ColorWithAlpha"){
		return ColorWithAlpha(libGalExe_fixed(player, params[0]), libGalExe_fixed(player, params[1]), libGalExe_fixed(player, params[2]), libGalExe_fixed(player, params[3]));
	}

	else if(function == "ColorFromIndex"){
		return ColorFromIndex(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "libNtve_gf_ConvertPlayerColorToColor"){
		return libNtve_gf_ConvertPlayerColorToColor(libGalExe_int(player, params[0]));
	}

	else if(function == "DataTableGetColor"){
		return DataTableGetColor(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DialogControlGetPropertyAsColor"){
		return DialogControlGetPropertyAsColor(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]), libGalExe_int(player, params[2]));
	}

	else if(function == "libNtve_gf_DialogItemColor"){
		return libNtve_gf_DialogItemColor(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "PingGetColor"){
		return PingGetColor(libGalExe_int(player, params[0]));
	}

	else if(function == "PathGetColor"){
		return PathGetColor(libGalExe_int(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "UserDataGetColor"){
		return UserDataGetColor(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}
	return Color(0,0,0);
}




trigger libGalExe_trigger(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetTrigger"){
		return DataTableGetTrigger(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "TriggerGetCurrent"){
		return TriggerGetCurrent();
	}

	else if(function == "EventTrigger"){
		return EventTrigger();
	}

	else if(function == "TriggerCreate"){
		return TriggerCreate(libGalExe_string(player, params[0]));
	}

	else if(function == "TriggerFind"){
		return TriggerFind(libGalExe_string(player, params[0]));
	}
	return null;
}




abilcmd libGalExe_abilcmd(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "ConversationDataStateAbilCmd"){
		return ConversationDataStateAbilCmd(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "StringToAbilCmd"){
		return StringToAbilCmd(libGalExe_string(player, params[0]));
	}

	else if(function == "DataTableGetAbilCmd"){
		return DataTableGetAbilCmd(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "OrderGetAbilityCommand"){
		return OrderGetAbilityCommand(libGalExe_order(player, params[0]));
	}

	else if(function == "AbilityCommand"){
		return AbilityCommand(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TechTreeUnitProducedAbilCmd"){
		return TechTreeUnitProducedAbilCmd(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "TechTreeUpgradeProducedAbilCmd"){
		return TechTreeUpgradeProducedAbilCmd(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}

	else if(function == "EventTargetModeAbilCmd"){
		return EventTargetModeAbilCmd();
	}

	else if(function == "EventCommandErrorAbilCmd"){
		return EventCommandErrorAbilCmd();
	}

	else if(function == "EventUnitAbility"){
		return EventUnitAbility();
	}

	else if(function == "libNtve_gf_EventItemAbilityOrUnitAbility"){
		return libNtve_gf_EventItemAbilityOrUnitAbility();
	}

	else if(function == "UserDataGetAbilCmd"){
		return UserDataGetAbilCmd(libGalExe_string(player, params[0]), libGalExe_string(player, params[1]), libGalExe_string(player, params[2]), libGalExe_int(player, params[3]));
	}

	else if(function == "TechTreeBehaviorProducedAbilCmd"){
		return TechTreeBehaviorProducedAbilCmd(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}
	return null;
}




byte libGalExe_byte(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetByte"){
		return DataTableGetByte(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}
	return 0;
}




doodad libGalExe_doodad(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetDoodad"){
		return DataTableGetDoodad(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "DoodadFromId"){
		return DoodadFromId(libGalExe_int(player, params[0]));
	}
	return null;
}




revealer libGalExe_revealer(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetRevealer"){
		return DataTableGetRevealer(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "VisRevealerCreate"){
		return VisRevealerCreate(libGalExe_int(player, params[0]), libGalExe_region(player, params[1]));
	}

	else if(function == "VisRevealerLastCreated"){
		return VisRevealerLastCreated();
	}
	return null;
}




sound libGalExe_sound(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetSound"){
		return DataTableGetSound(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "SoundLastPlayed"){
		return SoundLastPlayed();
	}
	return null;
}




soundlink libGalExe_soundlink(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetSoundLink"){
		return DataTableGetSoundLink(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "SoundLink"){
		return SoundLink(libGalExe_string(player, params[0]), libGalExe_int(player, params[1]));
	}
	return null;
}




timer libGalExe_timer(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetTimer"){
		return DataTableGetTimer(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "TimerLastStarted"){
		return TimerLastStarted();
	}

	else if(function == "TimerCreate"){
		return TimerCreate();
	}

	else if(function == "EventTimer"){
		return EventTimer();
	}
	return null;
}




transmissionsource libGalExe_transmissionsource(int player, string param){

    string cmd = param;
    string paramMsg = "";
    string function = "";

    int parseDepth = 0;

    int paramindex = 0;
    string[99] params;

    int i;
    int j;
    string c;

    i = 1;
    while(1)
    {
        if(StringSub(cmd, i, i) != "(")
        {
            function += StringSub(cmd, i, i);
            i += 1;
        }
        else
        {
            break;
        }
        if(i > StringLength(cmd) + 1)
        {
            break;
        }
    }
    function = libGalExe_strip(function);

    paramMsg = StringSub(cmd, i, StringLength(cmd));
    parseDepth = 0;
    for(i = 2; i < StringLength(paramMsg); i+=1)
    {
        c = StringSub(paramMsg, i, i);
        if(c == "(")
        {
            parseDepth += 1;
            params[paramindex] += c;
        }
        else if(c == ")" && parseDepth > 0)
        {
            parseDepth -= 1;
            params[paramindex] += c;
        }
        else if(c == "," && parseDepth == 0)
        {
            paramindex += 1;
        }
        else
        {
            params[paramindex] += c;
        }
    }
    for(i = 0; i < 99; i+=1)
    {
        if(params[i])
        {
            params[i] = libGalExe_strip(params[i]);
        }
    }

	if(function == "DataTableGetTransmissionSource"){
		return DataTableGetTransmissionSource(libGalExe_bool(player, params[0]), libGalExe_string(player, params[1]));
	}

	else if(function == "TransmissionSourceFromUnitType"){
		return TransmissionSourceFromUnitType(libGalExe_string(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "TransmissionSourceFromUnit"){
		return TransmissionSourceFromUnit(libGalExe_unit(player, params[0]), libGalExe_bool(player, params[1]), libGalExe_bool(player, params[2]), libGalExe_string(player, params[3]));
	}

	else if(function == "TransmissionSourceFromModel"){
		return TransmissionSourceFromModel(libGalExe_string(player, params[0]));
	}

	else if(function == "TransmissionSourceFromMovie"){
		return TransmissionSourceFromMovie(libGalExe_string(player, params[0]), libGalExe_bool(player, params[1]));
	}

	else if(function == "TransmissionSource"){
		return TransmissionSource();
	}
	return null;
}