include "Script/debug_h";
include "Script/split_string";
include "Script/ItemList";

static const string CONTAINERDLG_PATH = "UIContainer/ConsoleUIContainer/CatalogManager/WeaponManager";

ItemListContainerStruct WeaponContainer;
static ItemListStruct ItemList;
static ListBoxFilterStruct ListBoxFilter;

bool WeaponListBoxFilterQuery(bool a, bool b){
    int player = EventPlayer();
	playergroup pg = PlayerGroupSingle(player);
	string val = DialogControlGetPropertyAsString(ListBoxFilter.editbox,c_triggerControlPropertyEditText,player);
	ItemList_FilterListRebuild(ItemList,ListBoxFilter,val,pg);
	return true;
}

bool WeaponListBoxSelectionChanged(bool a, bool b){
    int player = EventPlayer();
    return ItemList_FilterBoxSelectionChanged(ItemList, ListBoxFilter, player);
}

void WeaponListBoxSetActive(ItemListStructRef itemList, int index, playergroup pg){
	DialogControlSetPropertyAsString(WeaponContainer.messageBox,c_triggerControlPropertyEditText,pg,itemList.list[index]);
}

static unitgroup WeaponContainerTarget(){
    return UnitGroupSelected(EventPlayer());
}
static string WeaponContainerWeapon(string val){
    return val;
}

bool WeaponContainerSendHandler(bool a, bool b){
    bool trigRan = true;
    string val = DialogControlGetPropertyAsString(WeaponContainer.messageBox,c_triggerControlPropertyEditText,EventPlayer());
    string weapon = WeaponContainerWeapon(val);
    unitgroup ug = WeaponContainerTarget();
    unit u;
    int i;
    if(EventDialogControl()==WeaponContainer.addButton){
        for(i=1;i<=UnitGroupCount(ug,c_unitCountAll);i+=1){
            u = UnitGroupUnit(ug,i);
            UnitWeaponAdd(u,weapon,"");
            print("Adding Weapon ["+weapon+"] to unit "+UnitGetType(u));
        }
    }
    else if(EventDialogControl()==WeaponContainer.removeButton){
        for(i=1;i<=UnitGroupCount(ug,c_unitCountAll);i+=1){
            u = UnitGroupUnit(ug,i);
            UnitWeaponRemove(u,weapon);
            print("Removing Weapon ["+weapon+"] to unit "+UnitGetType(u));
        }
        
    }
    return trigRan;
}

void WeaponHandler_Init(){
    playergroup pg = PlayerGroupAll();
    ItemListContainer_InitStandard(WeaponContainer, CONTAINERDLG_PATH, "WeaponContainerSendHandler");
    ItemListInitFromCatalog(ItemList, c_gameCatalogWeapon, ItemListCatalogFilter);
    ItemList_FilterListInitStandard(ListBoxFilter, "WeaponListBox", WeaponListBoxSetActive, CONTAINERDLG_PATH);
	ItemList_FilterListRebuild(ItemList,ListBoxFilter,"",pg);
}