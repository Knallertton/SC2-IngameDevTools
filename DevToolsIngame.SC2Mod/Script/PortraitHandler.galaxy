include "Script/debug_h";
include "Script/ItemList";

static const string CONTAINERDLG_PATH = "UIContainer/ConsoleUIContainer/CatalogManager/PortraitManager/PortraitManager";
static const string PORTRAITCONTAINERDLG_PATH = "UIContainer/ConsoleUIContainer/CatalogManager/PortraitManager/PortraitContainer";

ItemListContainerStruct PortraitContainer;
static ItemListStruct ItemList;
static ListBoxFilterStruct ListBoxFilter;
static int PortraitFrame;
static int PortraitFrameContainer;

bool PortraitListBoxFilterQuery(bool a, bool b){
    int player = EventPlayer();
	playergroup pg = PlayerGroupSingle(player);
	string val = DialogControlGetPropertyAsString(ListBoxFilter.editbox,c_triggerControlPropertyEditText,EventPlayer());
	ItemList_FilterListRebuild(ItemList,ListBoxFilter,val,pg);
	return true;
}

bool PortraitListBoxSelectionChanged(bool a, bool b){
    return ItemList_FilterBoxSelectionChanged(ItemList, ListBoxFilter, EventPlayer());
}


int PortraitList_RebuildPortrait(){
	int p;
	if(PortraitFrame>-1){
		DialogControlDestroy(PortraitFrame);
	}
	PortraitFrame = DialogControlCreateInPanelFromTemplate(PortraitFrameContainer,c_triggerControlTypePortrait,"PortraitManager/PortraitTemplateFull");
	p = PortraitGetTriggerControl(PortraitFrame);
	PortraitSetBorderVisible(p,false);
	return p;
}


void PortraitListBoxSetActive(ItemListStructRef itemList, int index,playergroup pg){
    string portId;
	string portActor = "PortraitActorDummy";
	int Portrait;
	portId = ItemListGetVal(ItemList,index);
	if(CatalogEntryIsValid(c_gameCatalogActor,portId)){
		portActor = portId;
	}
	Portrait = PortraitList_RebuildPortrait();
	PortraitSetModel(Portrait,portId,false);
	PortraitSetActor(Portrait,portActor);
	DialogControlSetPropertyAsString(PortraitContainer.messageBox,c_triggerControlPropertyEditText,pg,ItemListGetVal(itemList,index));
    
}

static unitgroup PortraitContainerTarget(){
    
    return UnitGroupSelected(EventPlayer());
}

static string PortraitContainerPortrait(string val){
    
    
    return val;
}

bool PortraitContainerSendHandler(bool a, bool b){
    
    bool trigRan = true;
    int player = EventPlayer();
    string val = DialogControlGetPropertyAsString(PortraitContainer.messageBox,c_triggerControlPropertyEditText,player);
    string Portrait = PortraitContainerPortrait(val);
    int i;
	int p;
    if(EventDialogControl()==PortraitContainer.addButton){
		p = PortraitGetTriggerControl(PortraitFrame);
		PortraitSetAnim(p,"Talk");
    }
    else if(EventDialogControl()==PortraitContainer.removeButton){
        //print("Removing Portrait ["+Portrait+"] to unit "+UnitGetType(u));
    }
    return trigRan;
}


bool PortraitList_IsPortrait(int catalog, string entry){
    return (StringFind(entry,"Portrait",false) >= 0);
}


void PortraitHandler_Init(){
    
	playergroup pg = PlayerGroupAll();
	ItemList.id = "PortraitList";
	PortraitFrame = -1;
	PortraitFrameContainer = DialogControlHookupStandard(c_triggerControlTypePanel,PORTRAITCONTAINERDLG_PATH);
	PortraitList_RebuildPortrait();
    ItemListContainer_InitStandard(PortraitContainer, CONTAINERDLG_PATH, "PortraitContainerSendHandler");
    ItemListInitFromCatalog(ItemList, c_gameCatalogModel, PortraitList_IsPortrait);
    ItemList_FilterListInitStandard(ListBoxFilter, "PortraitListBox", PortraitListBoxSetActive, ItemListItemTextValue, CONTAINERDLG_PATH+"/NavList");
	ItemList_FilterListRebuild(ItemList,ListBoxFilter,"",pg);
}